/**
 * PAPI v1.14+ Real Generated Descriptors
 *
 * This file uses descriptors generated by the PAPI CLI.
 * To regenerate descriptors for your project, run these commands:
 *
 * npm install -g polkadot-api
 * papi add polkadot --wsUrl wss://rpc.polkadot.io
 * papi add kusama --wsUrl wss://kusama-rpc.polkadot.io
 * papi add moonbeam --wsUrl wss://wss.api.moonbeam.network
 * papi add bifrost --wsUrl wss://hk.p.bifrost-rpc.liebi.com/ws
 * papi add astar --wsUrl wss://rpc.astar.network
 * papi generate
 *
 */

// Import real generated descriptors following PAPI documentation pattern
import {
  polkadot,
  kusama,
  moonbeam,
  bifrost,
  astar,
} from "@polkadot-api/descriptors";

// Type-safe mapping of chain keys to descriptors
const CHAIN_DESCRIPTORS: Record<string, any> = {
  polkadot,
  kusama,
  moonbeam,
  bifrost,
  astar,
  // Fallback chains (add descriptors when endpoints are available)
  acala: polkadot, // Use polkadot as fallback
  hydration: polkadot, // Use polkadot as fallback
} as const;

type SupportedChainKey = keyof typeof CHAIN_DESCRIPTORS;

/**
 * Get the proper descriptor for a chain to use with client.getTypedApi()
 * @param chainKey - The chain identifier
 * @returns The chain descriptor for use with PAPI v1.14+ getTypedApi()
 */
export function getDescriptorForChain(chainKey: string): any {
  const key = chainKey as SupportedChainKey;
  if (key in CHAIN_DESCRIPTORS) {
    return CHAIN_DESCRIPTORS[key];
  }

  // Default to polkadot descriptor if chain not found
  console.warn(
    `No descriptor found for chain '${chainKey}', using polkadot as fallback`,
  );
  return CHAIN_DESCRIPTORS.polkadot;
}

/**
 * Get typed API for a chain using PAPI v1.14+ pattern
 * @param client - The PAPI client
 * @param chainKey - The chain identifier
 * @returns Typed API with all chain-specific types and methods
 */
export function getTypedApiForChain(client: any, chainKey: string): any {
  const descriptor = getDescriptorForChain(chainKey);
  return client.getTypedApi(descriptor);
}

// Export the descriptors for direct use if needed
export { polkadot, kusama, moonbeam, bifrost, astar };
export type { SupportedChainKey };

// List of chains with real descriptors vs fallbacks
export const CHAINS_WITH_REAL_DESCRIPTORS = [
  "polkadot",
  "kusama",
  "moonbeam",
  "bifrost",
  "astar",
] as const;
export const CHAINS_WITH_FALLBACK_DESCRIPTORS = ["acala", "hydration"] as const;
