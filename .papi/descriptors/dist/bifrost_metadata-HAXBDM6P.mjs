// .papi/descriptors/src/bifrost_metadata.ts
var binMeta = "";
var bifrost_metadata_default = binMeta;
export {
  bifrost_metadata_default as default
};
