"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// .papi/descriptors/src/descriptors.ts
var descriptors_exports = {};
__export(descriptors_exports, {
  Astar: () => Astar,
  Bifrost: () => Bifrost,
  Kusama: () => Kusama,
  Moonbeam: () => Moonbeam,
  Polkadot: () => Polkadot
});
var minified, commonTrees, tokens, replaceTokens, tokenizedCommonTrees, unwrap, getChainDescriptors, Polkadot, Moonbeam, Bifrost, Astar, Kusama;
var init_descriptors = __esm({
  ".papi/descriptors/src/descriptors.ts"() {
    "use strict";
    [minified, commonTrees, tokens] = JSON.parse(`[{"polkadot":{"351":{"19":{"0":0,"1":1,"2":2,"3":3,"4":1,"5":4,"6":5,"7":1,"8":6,"9":7,"10":8,"11":1,"12":9,"13":10,"14":2,"15":2,"16":11,"17":12,"18":13},"24":{"20":1,"21":33,"22":34,"23":35},"28":0,"46":1,"49":2,"51":3,"58":{"0":76,"52":57,"53":57,"54":77,"55":78,"56":79,"57":80},"61":4,"63":5,"106":6,"109":7,"112":8,"119":9,"126":10,"128":11,"136":12,"139":13,"145":{"140":1,"141":206,"142":207,"143":109,"144":4},"146":14,"148":15,"149":16,"151":17,"154":14,"157":{"155":251,"156":252},"159":18,"161":19,"167":20,"181":{"171":1,"172":297,"173":298,"174":299,"175":1,"176":300,"177":1,"178":301,"179":302,"180":303},"185":21,"207":22,"212":23,"217":24,"218":14,"222":25,"227":26,"229":27,"232":28,"236":29,"258":30,"261":31,"265":32,"278":33,"284":34,"289":35,"291":36,"298":37,"301":38,"304":39,"306":40,"311":41,"316":42,"317":14,"318":{"MigrationProcess":498,"AutoLimits":499,"SignedMigrationMaxLimits":500},"334":43,"338":44,"340":45,"343":46,"347":47,"350":48},"658":{"19":65,"24":{"363":36,"364":37,"365":38,"366":39,"367":40,"368":41,"369":42,"370":43,"371":44,"372":39},"28":66,"46":67,"49":68,"51":69,"58":70,"61":14,"63":14,"106":71,"109":14,"112":14,"119":72,"126":73,"128":14,"136":74,"139":75,"145":{"364":70,"443":209,"444":70,"445":70,"446":70,"447":70,"448":210,"449":70,"450":211},"146":14,"148":{"451":218,"452":218,"453":219,"454":220},"149":76,"151":77,"154":{"465":242,"466":243,"467":242,"468":244,"469":242,"470":245,"471":246,"472":244},"157":{"387":130,"473":253,"474":254,"475":254,"476":130,"477":255,"478":256,"479":257,"480":257,"481":258,"482":259},"159":{"387":269,"483":265,"484":266,"485":267,"486":268},"161":78,"167":79,"181":{"443":307,"501":304,"502":305,"503":306,"504":308},"185":80,"207":81,"212":82,"217":14,"218":14,"222":83,"227":14,"229":14,"232":84,"236":14,"258":85,"261":86,"265":14,"278":87,"284":14,"289":88,"291":89,"298":90,"301":14,"304":91,"306":92,"311":93,"316":94,"317":95,"318":{"control_auto_migration":501,"continue_migrate":502,"migrate_custom_top":503,"migrate_custom_child":504,"set_signed_max_limits":505,"force_set_progress":506},"334":96,"338":97,"340":98,"343":99,"347":14,"350":14},"910":{"19":{"659":25,"660":26,"661":27,"662":28,"663":28,"664":29,"665":30,"666":31},"24":{"667":45,"668":45,"669":46,"670":47,"671":48,"672":48,"673":48,"674":48,"675":48,"676":49},"28":115,"46":14,"49":14,"51":116,"58":117,"61":118,"63":14,"106":119,"109":120,"112":14,"119":121,"126":122,"128":14,"136":123,"139":124,"145":125,"146":14,"148":{"761":221,"762":221,"763":222},"149":126,"151":127,"154":{"767":247,"768":27,"769":27,"770":27,"771":248,"772":249,"773":27,"774":250},"157":{"683":263,"775":249,"776":260,"777":261,"778":262,"779":262},"159":{"683":274,"780":270,"781":271,"782":272,"783":273},"161":128,"167":129,"181":130,"185":131,"207":132,"212":{"693":153,"822":373,"823":374,"824":158,"825":27},"217":133,"218":14,"222":14,"227":14,"229":134,"232":14,"236":14,"258":135,"261":14,"265":14,"278":136,"284":14,"289":137,"291":14,"298":138,"301":14,"304":139,"306":140,"311":141,"316":{"802":465,"863":489,"864":489,"865":465,"866":465,"867":465,"868":490,"869":465,"870":491,"871":465},"317":142,"318":{"693":93,"Migrated":507,"AutoMigrationFinished":27,"Halted":508},"334":143,"338":144,"340":145,"343":14,"347":14,"350":14},"1009":{"19":163,"24":164,"28":14,"46":165,"49":166,"51":167,"58":168,"61":169,"63":14,"106":170,"109":14,"112":14,"119":14,"126":171,"128":14,"136":172,"139":173,"145":174,"146":14,"148":14,"149":175,"151":176,"154":177,"157":178,"159":179,"161":180,"167":181,"181":182,"185":183,"207":184,"212":167,"217":185,"218":14,"222":14,"227":14,"229":14,"232":14,"236":14,"258":186,"261":14,"265":14,"278":14,"284":14,"289":14,"291":14,"298":187,"301":14,"304":188,"306":189,"311":190,"316":191,"317":192,"318":{"MaxKeyLen":1},"334":193,"338":194,"340":14,"343":171,"347":14,"350":14},"1010":{"19":14,"24":14,"28":14,"46":14,"49":14,"51":14,"58":14,"61":14,"63":14,"106":14,"109":14,"112":14,"119":14,"126":14,"128":14,"136":14,"139":14,"145":14,"146":14,"148":14,"149":14,"151":14,"154":14,"157":14,"159":14,"161":14,"167":14,"181":14,"185":14,"207":14,"212":14,"217":14,"218":14,"222":14,"227":14,"229":14,"232":14,"236":14,"258":14,"261":14,"265":14,"278":14,"284":14,"289":14,"291":14,"298":14,"301":14,"304":14,"306":14,"311":14,"316":14,"317":14,"318":14,"334":14,"338":14,"340":14,"343":14,"347":14,"350":14},"1133":{"201":207,"1012":208,"1016":209,"1024":{"1020":583,"1021":584,"1022":585,"1023":586},"1035":210,"1038":211,"1040":212,"1042":213,"1077":214,"1085":215,"1091":216,"1094":217,"1098":218,"1103":219,"1105":220,"1108":221,"1110":222,"1115":223,"1118":{"1113":654,"1114":655,"1116":656,"1117":657},"1123":224,"1126":{"1124":662,"1125":663},"1128":225,"1132":226}},"moonbeam":{"351":{"19":{"0":668,"1":1,"2":2,"3":3,"4":1,"5":4,"6":5,"7":1,"8":6,"9":7,"10":669,"11":1,"12":9,"13":10,"14":2,"15":2,"16":11,"17":12},"24":{"20":1,"21":878,"22":34,"23":35},"28":{"25":884,"26":885,"27":52},"33":{"1176":392,"Requests":1049,"RequestCount":57,"LocalVrfOutput":62,"RelayEpoch":57,"NotFirstBlock":392,"RandomnessResults":1050,"PreviousLocalVrfOutput":6},"49":2,"58":{"0":690,"52":57,"53":57,"54":691,"55":692,"56":693,"57":694},"61":4,"136":{"129":1,"130":914,"131":57,"132":179,"133":1,"134":915,"135":1},"139":{"137":886,"138":887},"145":{"140":1,"141":894,"142":207,"143":109,"144":4},"148":15,"154":14,"157":{"155":796,"156":797},"159":{"158":849},"338":49,"1157":50,"1159":51,"1160":14,"1175":{"150":57,"171":710,"1161":1,"1162":1,"1163":711,"1164":712,"1165":713,"1166":715,"1167":715,"1168":716,"1169":717,"1170":718,"1171":720,"1172":721,"1173":109,"1174":722,"InflationDistributionInfo":709,"AutoCompoundingDelegations":714,"WasInactive":719,"EnableMarkingOffline":2},"1177":{"62":771,"1176":2},"1178":{"EligibleRatio":1,"EligibleCount":1},"1179":{"MappingWithDeposit":772,"NimbusLookup":773},"1180":{"AccountLookupOverride":779,"CollatorsPool":780,"CounterForCollatorsPool":1,"CurrentRound":1,"ForceRotation":2,"MinOrbiterDeposit":57,"OrbiterPerRound":781,"RegisteredOrbiter":782},"1182":{"1181":788},"1183":{"1183":2},"1193":{"1184":808,"1185":809,"1186":810,"1187":811,"1188":812,"1189":813,"1190":814,"1191":815,"1192":816},"1194":{"FullyUpgraded":2,"MigrationState":845,"ShouldPauseXcm":2},"1195":14,"1196":14,"1197":{"1197":859},"1199":52,"1203":53,"1209":54,"1215":55,"1216":55,"1217":{"39":2,"AccountsPayable":921,"ClaimedRelayChainIds":217,"UnassociatedContributions":922,"InitRelayBlock":1,"EndRelayBlock":1,"InitializedRewardAmount":57,"TotalContributors":1},"1224":56,"1225":14,"1226":{"319":57,"320":509,"321":405,"322":1,"323":510,"324":511,"325":512,"326":513,"327":514,"328":937,"329":938,"330":2,"331":2,"332":517},"1229":{"0":940,"132":941,"201":942,"1227":939,"1228":57},"1230":{"AssetIdType":980,"AssetTypeId":981},"1231":{"IndexToAccount":989,"TransactInfoWithWeightLimit":990,"DestinationAssetFeePerSecond":991,"RelayIndices":992},"1233":{"1232":1011,"EthereumXcmSuspended":2},"1234":14,"1235":{"AssetsById":1025,"CounterForAssetsById":1,"AssetsByLocation":1026,"AssetsCreationDetails":1027},"1237":{"1236":1036},"1238":{"Mode":1040},"1241":57,"1242":{"RelayStorageRoot":4,"RelayStorageRootKeys":179},"1243":14,"1246":{"1244":771,"1245":1058,"FreeHeadersRemaining":1,"InitialHash":6,"BestFinalized":1055,"ImportedHashes":4,"ImportedHashesPointer":1,"ImportedHeaders":1056,"CurrentAuthoritySet":1057},"1247":{"1244":771,"1245":1058,"ParasInfo":1067,"ImportedParaHeads":1068,"ImportedParaHashes":399},"1248":{"1244":771,"1245":1077,"InboundLanes":1078,"OutboundLanes":1079,"OutboundMessages":1080},"1249":{"Bridges":1090,"LaneToBridge":1091}},"658":{"19":65,"24":{"363":879,"364":37,"365":880,"366":39,"367":881,"368":882,"369":42,"370":43,"371":44,"372":39},"28":66,"33":{"set_babe_randomness_results":130},"49":68,"58":{"385":696,"388":695,"389":695,"390":697,"391":698,"392":699,"393":700,"394":87,"395":88},"61":14,"136":{"431":916,"432":183,"433":917,"434":70,"435":70,"436":70},"139":{"437":196,"438":888,"439":198,"440":889,"441":200,"442":890},"145":{"364":70,"443":895,"444":70,"445":70,"446":70,"447":70,"448":210,"449":70,"450":211},"148":{"451":218,"452":218,"453":219,"454":897},"154":{"465":789,"466":790,"467":789,"468":791,"469":789,"470":792},"157":{"473":798,"474":799,"475":799,"476":130,"477":800,"478":801,"479":802,"480":802,"481":803,"482":804},"159":{"483":850,"484":851,"485":852,"486":853},"338":100,"1157":101,"1159":14,"1160":{"fill_block":689,"trigger_defensive":130},"1175":{"1252":723,"1253":724,"1254":725,"1255":132,"1256":132,"1257":132,"1258":132,"1259":726,"1260":727,"1261":728,"1262":727,"1263":130,"1264":130,"1265":729,"1266":730,"1267":731,"1268":130,"1269":733,"1270":734,"1271":735,"1272":736,"1273":731,"1274":738,"delegate_with_auto_compound":732,"set_auto_compound":737,"notify_inactive_collator":733,"enable_marking_offline":739,"force_join_candidates":740,"set_inflation_distribution_config":741},"1177":{"kick_off_authorship_validation":130},"1178":{"set_eligible":132},"1179":{"428":776,"add_association":774,"update_association":775,"clear_association":774,"remove_keys":130},"1180":{"collator_add_orbiter":783,"collator_remove_orbiter":783,"orbiter_leave_collator_pool":733,"orbiter_register":130,"orbiter_unregister":784,"add_collator":733,"remove_collator":733},"1182":14,"1183":{"enter_maintenance_mode":130,"resume_normal_operation":130},"1193":{"1275":817,"1276":818,"1277":819,"1278":130,"1279":820,"1280":821,"1281":822,"1282":823,"1283":824,"1284":825,"1285":826,"1286":827,"1287":827,"1288":828,"1289":130,"1290":829,"1291":830,"1292":831,"1293":832,"1294":832,"1295":832,"1296":832,"1297":832,"1298":832},"1194":14,"1195":14,"1196":{"create_contract_metadata":858},"1197":{"1299":860},"1199":14,"1203":102,"1209":103,"1215":104,"1216":104,"1217":{"382":130,"associate_native_identity":923,"change_association_with_relay_keys":924,"update_reward_address":925,"complete_initialization":926,"initialize_reward_vec":927},"1224":14,"1225":14,"1226":105,"1229":{"383":948,"385":949,"386":950,"389":948,"390":962,"395":947,"450":953,"511":943,"620":960,"1308":944,"1309":945,"1310":945,"1311":945,"1312":945,"1313":946,"1314":950,"1315":945,"1316":945,"1317":951,"1318":952,"1319":945,"1320":954,"1321":945,"1322":955,"1323":956,"1324":957,"1325":958,"1326":959,"1327":945,"1328":961,"1329":950,"1330":950,"1331":950},"1230":{"register_foreign_asset":982,"change_existing_asset_type":983,"remove_existing_asset_type":984,"destroy_foreign_asset":984},"1231":{"529":70,"604":994,"transact_through_derivative":995,"transact_through_sovereign":996,"set_transact_info":997,"remove_transact_info":524,"transact_through_signed":998,"set_fee_per_second":999,"remove_fee_per_second":1000,"hrmp_manage":1001},"1233":{"1302":1012,"transact_through_proxy":1013,"suspend_ethereum_xcm_execution":130,"resume_ethereum_xcm_execution":130,"force_transact_as":1014},"1234":14,"1235":{"create_foreign_asset":1028,"change_xcm_location":1029,"freeze_foreign_asset":1030,"unfreeze_foreign_asset":1031},"1237":{"1332":1038,"add_asset":1037,"edit_asset":1037,"pause_asset_support":1038,"resume_asset_support":1038},"1238":{"paused_to_normal":130,"fast_authorize_upgrade":24},"1241":106,"1242":14,"1243":14,"1246":{"1337":1061,"1338":1062,"submit_finality_proof":1059,"initialize":1060,"submit_finality_proof_ex":1063,"force_set_pallet_state":1064},"1247":{"1337":1061,"1338":1062,"submit_parachain_heads":1070,"submit_parachain_heads_ex":1071},"1248":{"1337":1061,"1338":1081,"receive_messages_proof":1082,"receive_messages_delivery_proof":1083},"1249":{"open_bridge":1092,"close_bridge":1093}},"910":{"19":{"659":25,"660":670,"661":27,"662":671,"663":671,"664":672,"665":30},"24":{"667":45,"668":45,"669":883,"670":47,"671":48,"672":48,"673":48,"674":48,"675":48},"28":115,"33":{"RandomnessRequestedBabeEpoch":1051,"RandomnessRequestedLocal":1052,"RequestFulfilled":1053,"RequestFeeIncreased":1054,"RequestExpirationExecuted":1053},"49":14,"58":{"288":705,"684":701,"685":702,"686":703,"687":704,"688":705,"689":705,"690":706,"691":705,"692":705,"693":705,"694":705,"695":705,"696":705,"697":705,"698":707,"699":96,"700":96,"701":705,"702":705,"703":705,"704":97},"61":{"705":708},"136":{"691":189,"729":185,"730":918,"731":187,"732":188,"733":919,"734":191,"735":920,"736":74,"737":74,"738":74,"739":74},"139":{"740":891,"741":892,"742":893,"743":893},"145":{"745":212,"746":896,"747":896,"748":705,"749":214,"750":74,"751":74,"752":215,"753":74,"754":215,"755":215,"756":215,"757":215,"758":896,"759":216,"760":216},"148":{"761":221,"762":221,"763":898},"154":{"767":793,"768":27,"769":27,"770":27,"771":794,"772":795},"157":{"775":795,"776":805,"777":806,"778":807,"779":807},"159":{"780":854,"781":855,"782":856,"783":857},"338":146,"1157":147,"1159":14,"1160":{"DefensiveTestCall":27},"1175":{"707":762,"1345":742,"1346":743,"1347":744,"1348":745,"1349":746,"1350":747,"1351":748,"1352":748,"1353":749,"1354":748,"1355":750,"1356":751,"1357":752,"1358":753,"1359":753,"1360":754,"1361":755,"1362":756,"1363":757,"1364":757,"1365":758,"1366":759,"1367":760,"1368":761,"1369":765,"1370":766,"1371":767,"1372":767,"1373":768,"InflationDistributed":763,"InflationDistributionConfigUpdated":764,"AutoCompoundSet":769,"Compounded":770},"1177":14,"1178":{"EligibleUpdated":415},"1179":{"KeysRegistered":777,"KeysRemoved":777,"KeysRotated":778},"1180":{"OrbiterJoinCollatorPool":785,"OrbiterLeaveCollatorPool":785,"OrbiterRewarded":762,"OrbiterRotation":786,"OrbiterRegistered":787,"OrbiterUnregistered":671},"1182":14,"1183":{"1374":794,"1375":794,"EnteredMaintenanceMode":27,"NormalOperationResumed":27},"1193":{"1376":707,"1377":833,"1378":833,"1379":834,"1380":834,"1381":835,"1382":836,"1383":837,"1384":838,"1385":839,"1386":837,"1387":837,"1388":840,"1389":840,"1390":841,"1391":842,"1392":843,"1393":841,"1394":841,"1395":844,"1396":844,"1397":844},"1194":{"1374":794,"1375":794,"1398":848,"RuntimeUpgradeStarted":27,"RuntimeUpgradeCompleted":846,"MigrationStarted":847},"1195":14,"1196":14,"1197":{"1399":861},"1199":14,"1203":148,"1209":149,"1215":150,"1216":150,"1217":{"InitialPaymentMade":928,"NativeIdentityAssociated":929,"RewardsPaid":928,"RewardAddressUpdated":891,"InitializedAlreadyInitializedAccount":930,"InitializedAccountWithNotEnoughContribution":930},"1224":151,"1225":152,"1226":153,"1229":{"288":969,"695":966,"699":964,"703":969,"712":979,"759":973,"760":970,"802":963,"804":970,"1414":965,"1415":967,"1416":968,"1417":970,"1418":970,"1419":971,"1420":972,"1421":970,"1422":968,"1423":974,"1424":975,"1425":976,"1426":970,"1427":977,"1428":978,"1429":969,"1430":979},"1230":{"1431":27,"1432":986,"1433":988,"ForeignAssetRegistered":985,"ForeignAssetRemoved":987,"ForeignAssetDestroyed":987,"LocalAssetDestroyed":970},"1231":{"TransactedDerivative":1002,"TransactedSovereign":1003,"TransactedSigned":1004,"RegisteredDerivative":1005,"DeRegisteredDerivative":74,"TransactFailed":1006,"TransactInfoChanged":1007,"TransactInfoRemoved":1008,"DestFeePerSecondChanged":1009,"DestFeePerSecondRemoved":1008,"HrmpManagementSent":1010},"1233":{"ExecutedFromXcm":1015},"1234":14,"1235":{"1432":1033,"ForeignAssetCreated":1032,"ForeignAssetFrozen":1034,"ForeignAssetUnfrozen":1034,"TokensLocked":1035},"1237":{"1433":1008,"SupportedAssetAdded":1039,"SupportedAssetEdited":1039,"PauseAssetSupport":1008,"ResumeAssetSupport":1008},"1238":{"EnteredPausedXcmMode":27,"NormalXcmOperationResumed":27},"1241":154,"1242":14,"1243":14,"1246":{"UpdatedBestFinalizedHeader":1065},"1247":{"UntrackedParachainRejected":1072,"MissingParachainHead":1072,"IncorrectParachainHeadHash":1073,"RejectedObsoleteParachainHead":1074,"RejectedLargeParachainHead":1075,"UpdatedParachainHead":1074},"1248":{"MessageAccepted":1084,"MessagesReceived":1085,"MessagesDelivered":1086},"1249":{"BridgeOpened":1094,"ClosingBridge":1095,"BridgePruned":1096}},"1009":{"19":163,"24":164,"28":14,"33":{"691":57,"MaxRandomWords":1,"MinBlockDelay":1,"MaxBlockDelay":1,"BlockExpirationDelay":1,"EpochExpirationDelay":57},"49":166,"58":168,"61":169,"136":{"936":1,"937":1,"938":181,"939":1,"940":1},"139":173,"145":174,"148":14,"154":177,"157":178,"159":179,"338":194,"1157":195,"1159":14,"1160":14,"1175":{"1442":1,"1443":1,"1444":1,"1445":1,"1446":1,"1447":1,"1448":1,"1449":1,"1450":1,"1451":1,"1452":1,"1453":57,"1454":57,"1455":57,"MaxOfflineRounds":1,"BlockTime":57,"MaxCandidates":1,"LinearInflationThreshold":276},"1177":14,"1178":14,"1179":14,"1180":{"MaxPoolSize":1,"MaxRoundArchive":1,"RotatePeriod":1},"1182":{"920":57},"1183":14,"1193":196,"1194":14,"1195":14,"1196":14,"1197":14,"1199":14,"1203":14,"1209":14,"1215":197,"1216":197,"1217":{"InitializationPayment":1,"MaxInitContributors":1,"RewardAddressRelayVoteThreshold":1,"SignatureNetworkIdentifier":227},"1224":198,"1225":14,"1226":14,"1229":199,"1230":14,"1231":{"1477":993,"1478":13},"1233":14,"1234":14,"1235":14,"1237":14,"1238":14,"1241":200,"1242":{"MaxStorageRoots":1},"1243":14,"1246":{"MaxFreeHeadersPerBlock":1,"FreeHeadersInterval":445,"HeadersToKeep":1},"1247":{"ParasPalletName":1069,"HeadsToKeep":1,"MaxParaHeadDataSize":1},"1248":14,"1249":{"BridgedNetwork":993,"BridgeDeposit":57}},"1010":{"19":14,"24":14,"28":14,"33":14,"49":14,"58":14,"61":14,"136":14,"139":14,"145":14,"148":14,"154":14,"157":14,"159":14,"338":14,"1157":14,"1159":14,"1160":14,"1175":14,"1177":14,"1178":14,"1179":14,"1180":14,"1182":14,"1183":14,"1193":14,"1194":14,"1195":14,"1196":14,"1197":14,"1199":14,"1203":14,"1209":14,"1215":14,"1216":14,"1217":14,"1224":14,"1225":14,"1226":14,"1229":14,"1230":14,"1231":14,"1233":14,"1234":14,"1235":14,"1237":14,"1238":14,"1241":14,"1242":14,"1243":14,"1246":14,"1247":14,"1248":14,"1249":14},"1133":{"201":207,"1016":209,"1024":{"1020":1103,"1021":584,"1022":585,"1023":586},"1040":212,"1042":213,"1108":221,"1110":{"1109":1104},"1115":223,"1123":224,"1126":{"1124":1128,"1125":1129},"1128":{"1127":1130},"1500":{"511":1115,"1300":1114,"1485":1120,"1486":644,"1487":1109,"1488":1110,"1489":1111,"1490":1112,"1491":1113,"1492":1116,"1493":1117,"1494":1118,"1495":1119,"1496":628,"1497":1121,"1498":1122,"1499":599},"1502":227,"1504":228,"UnincludedSegmentApi":229,"KusamaFinalityApi":{"1482":1099,"1483":628,"synced_headers_grandpa_info":1100},"MoonriverKusamaFinalityApi":{"1482":1099,"1483":628},"ToMoonriverKusamaOutboundLaneApi":{"1484":1101},"FromMoonriverKusamaInboundLaneApi":{"1484":1102},"DebugRuntimeApi":{"trace_transaction":1105,"trace_block":1106,"trace_call":1107},"TxPoolRuntimeApi":{"1485":1108},"NimbusApi":{"can_author":1124},"VrfApi":{"get_last_vrf_output":1126,"vrf_key_lookup":1127}}},"bifrost":{"351":{"19":{"0":0,"1":1,"2":2,"3":3,"4":1,"5":4,"6":5,"7":1,"8":6,"9":7,"10":1131,"11":1,"12":9,"13":10,"14":2,"15":2,"16":11,"17":12,"18":13},"24":{"20":1,"21":1206,"22":34,"23":35},"28":0,"49":2,"51":3,"58":{"0":76,"52":57,"53":57,"54":77,"55":78,"56":1140,"57":1141},"61":4,"63":5,"119":{"74":101,"113":1,"114":2,"115":1147,"116":119,"117":1148,"118":168},"136":{"129":1,"130":178,"131":57,"132":179,"133":1,"134":1257,"135":1},"139":13,"145":{"140":1,"141":1193,"142":207,"143":109,"144":4},"146":14,"148":15,"151":{"60":235,"151":234,"VestingStartAt":1,"Cliff":326},"154":14,"157":{"155":1212,"156":252},"159":18,"338":49,"1157":50,"1159":51,"1175":{"150":57,"171":1151,"1161":1,"1162":1,"1163":1152,"1164":1153,"1165":1154,"1166":1155,"1167":1155,"1168":101,"1169":1156,"1170":1157,"1171":720,"1172":721,"1173":109,"1174":1158,"ParachainBondInfo":1150,"Staked":115},"1193":58,"1203":53,"1209":{"5":875,"1204":1261,"1205":1,"1206":1262,"1207":1263,"1208":874},"1224":56,"1225":14,"1226":43,"1241":57,"1506":59,"1507":60,"1508":{"30":177,"RelaySlotInfo":788},"1509":52,"1510":{"MinGasPrice":1011,"TargetMinGasPrice":1011},"1511":{"AccountExtension":1269,"ContractDeployer":1270},"1512":14,"1513":{"50":1282,"52":1280,"54":1281,"55":1281},"1514":14,"1515":{"ConcreteFungibleBalances":1296,"AbstractFungibleBalances":1297},"1516":14,"1517":{"ForeignLedger":1300,"ForeignMeta":1301,"ForeignList":1302,"KLast":1303,"FeeMeta":1304,"FeeReceiver":1305,"LiquidityPairs":1306,"PairStatuses":1307,"BootstrapPersonalSupply":1308,"BootstrapEndStatus":1307,"BootstrapRewards":1309,"BootstrapLimits":1309},"1519":{"1232":57,"1518":1343,"StateCommitments":1339,"ConsensusStates":1340,"ConsensusStateClient":1341,"UnbondingPeriod":1342,"FrozenConsensusClients":1344,"LatestStateMachineHeight":1343,"PreviousStateMachineHeight":1343,"ConsensusClientUpdateTime":1342,"StateMachineUpdateTime":1345,"Responded":1346,"ChildTrieRoot":6},"1520":{"239":115,"RelayChainStateCommitments":4,"ConsensusUpdated":2},"1521":{"HostParams":1364},"1522":{"1236":1366,"NativeAssets":1367,"LocalAssets":1368,"Decimals":1369,"TokenGatewayAddresses":1370,"WhitelistAddresses":1371},"1523":{"UniversalFeeCurrencyOrderList":1381,"UserDefaultFeeCurrency":1382,"ExtraFeeByCall":1383},"1524":{"312":1393,"MultisigConfirmAccount":100,"CurrentTrieIndex":1,"CurrentNonce":109,"QueryIdContributionInfo":1392,"RedeemPool":57,"FailedFundsToRefund":1394,"ReserveInfos":1395},"1525":{"NextForeignAssetId":1,"NextTokenId":1,"CurrencyIdToLocations":1409,"LocationToCurrencyIds":1410,"CurrencyIdToWeights":1411,"AssetMetadatas":1412,"CurrencyMetadatas":1413},"1526":{"Fees":63,"TokenPool":1280,"UnlockDuration":1421,"OngoingTimeUnit":1421,"MinimumMint":1280,"MinimumRedeem":1280,"TokenUnlockNextId":1369,"TokenUnlockLedger":1422,"UserUnlockLedger":1423,"TimeUnitUnlockLedger":1424,"TokenToRebond":1280,"MinTimeUnit":1421,"UnlockingTotal":1280,"VtokenIssuance":1280,"HookIterationLimit":1,"SupportedEth":1381,"EthUnlockNextId":1,"MintWithLockBlocks":1369,"VtokenIncentiveCoef":1280,"VtokenLockLedger":1425},"1527":{"74":1464,"OperateOrigins":1459,"FeeSources":1460,"HostingFees":1461,"DelegatorsIndex2Multilocation":1462,"DelegatorsMultilocation2Index":1463,"DelegatorNextIndex":1369,"ValidatorBoostList":1465,"ValidatorsByDelegator":1466,"ValidatorsByDelegatorXcmUpdateQueue":1467,"DelegatorLedgers":1468,"DelegatorLedgerXcmUpdateQueue":1469,"MinimumsAndMaximums":1470,"CurrencyDelays":1471,"DelegatorLatestTuneRecord":1472,"CurrencyLatestTuneRecord":1473,"CurrencyTuneExchangeRateLimit":1474,"DelegationsOccupied":1367,"LastTimeUpdatedOngoingTimeUnit":1369,"OngoingTimeUnitUpdateInterval":1369,"SupplementFeeAccountWhitelist":1475},"1528":{"XcmWeightAndFee":1538},"1530":{"1529":1543,"RelaychainLease":1,"ExchangeFee":1544},"1531":{"PoolNextId":1,"GaugePoolNextId":1,"RetireLimit":1,"PoolInfos":1556,"GaugePoolInfos":1557,"GaugeInfos":1558,"SharesAndWithdrawnRewards":1559,"BoostPoolInfos":1560,"UserBoostInfos":1561,"BoostWhitelist":1562,"BoostNextRoundWhitelist":1562,"BoostVotingPools":115,"BoostBasicRewards":1563,"UserFarmingPool":1564},"1532":{"171":1151,"TokenStatus":1589,"TokenList":1381},"1533":{"DistributionInfos":1597,"TokensProportions":1158,"DollarStandardInfos":1598,"DistributionNextId":1,"AutoEra":63},"1534":{"CrossCurrencyRegistry":1609,"IssueWhiteList":1610,"RegisterWhiteList":1610,"AccountToOuterMultilocation":1611,"OuterMultilocationToAccount":1612,"CrossingMinimumAmount":1613},"1536":{"701":1623,"1535":57,"BbConfigs":1622,"Epoch":1011,"UserLocked":371,"PointHistory":1624,"UserPointHistory":1625,"UserPointEpoch":1626,"SlopeChanges":115,"IncentiveConfigs":1627,"UserRewardPerTokenPaid":1628,"Rewards":1628,"UserMarkupInfos":1629,"LockedTokens":1630,"TotalLock":1280,"MarkupCoefficient":1631,"Position":57,"UserPositions":1632,"ExpiringPositions":1633,"NextExpiringBlock":1,"PositionOwner":1634},"1537":{"WhitelistAccountId":1653,"ExecutionFee":1280,"TransferToFee":1654,"XcmEthereumCallConfiguration":1655,"CurrencyIdList":1381,"SupportXcmFeeList":1381,"OrderQueue":1656,"DelayBlock":1,"HyperBridgeOracle":1657,"HydrationOracle":1658,"AsyncMintConfig":1659,"AsyncMintExecutions":1660,"HyperBridgeFeeExemptAccounts":101},"1542":61,"1543":{"140":1,"141":1701,"142":1702,"143":109,"144":4},"1544":{"PoolCount":1,"Pools":1705,"TokenRateCaches":1706,"TokenRateHardcap":1369},"1545":14,"1546":{"138":1628,"141":1735,"213":1740,"943":1369,"946":1369,"VotingForV2":1736,"PendingReferendumInfo":1737,"PendingVotingInfo":1738,"PendingRemoveDelegatorVote":1739,"VoteCapRatio":1369,"DelegatorVotes":1741,"PendingDelegatorVotes":1741,"ReferendumTimeoutV3":1742,"VoteDelegatorFor":1743,"ReferendumVoteStatusStore":1744},"1547":{"1529":1280,"LastAccruedInterestTime":1280,"LiquidationFreeCollaterals":1381,"TotalSupply":1280,"TotalBorrows":1280,"TotalReserves":1280,"AccountBorrows":1770,"AccountDeposits":1771,"AccountEarned":1772,"BorrowIndex":1280,"BorrowRate":1280,"SupplyRate":1280,"UtilizationRatio":1369,"Markets":1773,"UnderlyingAssetId":1774,"RewardSupplySpeed":1280,"RewardBorrowSpeed":1280,"RewardSupplyState":1775,"RewardBorrowState":1775,"RewardSupplierIndex":1776,"RewardBorrowerIndex":1776,"RewardAccured":371,"MarketBond":1777},"1548":{"EmergencyPrice":1280,"ForeignToNativeAsset":1774},"1552":{"1549":1810,"1550":1811,"1551":101},"1553":62,"1554":14,"1555":{"ChannelNextId":1,"Channels":1820,"CommissionTokens":1774,"ChannelCommissionTokenRates":1821,"ChannelVtokenShares":1821,"VtokenIssuanceSnapshots":1613,"PeriodVtokenTotalMint":1613,"PeriodVtokenTotalRedeem":1613,"PeriodChannelVtokenMint":1706,"PeriodTotalCommissions":1613,"PeriodClearedCommissions":1280,"ChannelClaimableCommissions":1563},"1556":14,"1557":{"Infos":1847,"SwapOutMin":1280,"AddLiquiditySwapOutMin":1280},"1558":{"ConfigurationByStakingProtocol":1851,"DelegatorByStakingProtocolAndDelegatorIndex":1852,"DelegatorIndexByStakingProtocolAndDelegator":1853,"LedgerByStakingProtocolAndDelegator":1854,"ValidatorsByStakingProtocolAndDelegator":1855,"NextDelegatorIndexByStakingProtocol":1856,"PendingStatusByQueryId":1857,"LastUpdateOngoingTimeUnitBlockNumber":1856,"LastUpdateTokenExchangeRateBlockNumber":1853}},"658":{"19":65,"24":{"363":1207,"364":37,"365":1208,"366":39,"367":1209,"368":1210,"369":42,"370":43,"371":44,"372":39},"28":66,"49":68,"51":{"382":70,"383":1134,"384":70,"385":1135,"386":70,"387":70},"58":{"385":1143,"388":1142,"389":1142,"390":1144,"391":1145,"392":85,"393":1146,"394":87,"395":88},"61":14,"63":14,"119":107,"136":{"431":1258,"432":183,"433":1259,"434":70,"435":70,"436":70},"139":{"437":196,"438":1190,"439":198,"440":1191,"441":200,"442":1192},"145":108,"146":14,"148":{"451":218,"452":218,"453":219,"454":1195},"151":{"459":130,"460":1236,"461":1252,"462":1253,"463":239,"init_vesting_start_at":1254,"set_vesting_per_block":1255,"force_set_cliff":1256},"154":{"465":1197,"466":1198,"467":1197,"468":1199,"469":1197,"470":1200,"471":1201,"472":1199},"157":{"387":130,"473":1213,"474":1214,"475":1214,"476":130,"477":1215,"478":1216,"479":1217,"480":1217,"481":1218,"482":1219},"159":{"387":269,"483":1222,"484":1223,"485":267,"486":268},"338":100,"1157":101,"1159":14,"1175":{"438":1162,"1252":723,"1253":724,"1254":1159,"1255":132,"1256":132,"1257":132,"1258":132,"1259":726,"1260":727,"1261":1160,"1262":727,"1263":130,"1264":130,"1265":729,"1266":730,"1267":1161,"1268":130,"1269":1164,"1270":1165,"1271":1166,"1272":1167,"1273":1161,"1274":1168,"schedule_leave_delegators":130,"execute_leave_delegators":1163,"cancel_leave_delegators":130},"1193":{"1275":1233,"1276":818,"1277":1234,"1278":130,"1279":820,"1280":821,"1281":822,"1282":1134,"1283":824,"1284":1235,"1285":1236,"1286":1237,"1287":1237,"1288":1238,"1289":130,"1290":1239,"1291":1240,"1292":1241,"1293":832,"1294":832,"1295":832,"1296":832,"1297":832,"1298":832},"1203":{"511":1266,"619":865,"1300":1265,"1301":1267},"1209":{"1302":1264},"1224":109,"1225":14,"1226":96,"1241":106,"1506":110,"1507":14,"1508":14,"1509":14,"1510":{"note_min_gas_price_target":1268},"1511":{"bind_evm_address":130,"add_contract_deployer":858,"remove_contract_deployer":858,"renounce_contract_deployer":130},"1512":{"383":1273,"1566":1274,"1567":1275,"1568":1276,"1569":1277,"1570":1278},"1513":{"383":1283,"385":1285,"389":1283,"390":1284,"set_balance":1286},"1514":14,"1515":14,"1516":{"send_as_sovereign":519},"1517":{"383":1312,"1571":1314,"set_fee_receiver":1310,"set_fee_point":1311,"create_pair":1313,"remove_liquidity":1315,"swap_exact_assets_for_assets":1316,"swap_assets_for_exact_assets":1317,"bootstrap_create":1318,"bootstrap_contribute":1319,"bootstrap_claim":1320,"bootstrap_end":1321,"bootstrap_update":1318,"bootstrap_refund":1321,"bootstrap_charge_reward":1322,"bootstrap_withdraw_reward":1323,"set_new_fee_receiver":1324},"1519":{"handle_unsigned":1347,"create_consensus_client":1348,"update_consensus_state":1349,"fund_message":1350},"1520":{"update_parachain_consensus":1359,"add_parachain":1360,"remove_parachain":1361},"1521":14,"1522":{"teleport":1372,"set_token_gateway_addresses":1373,"create_erc6160_asset":1374,"update_erc6160_asset":1375,"set_whitelist_addresses":1376},"1523":{"set_user_default_fee_currency":1384,"set_default_fee_currency_list":1385,"set_extra_fee":1386,"dispatch_permit":1387},"1524":{"619":70,"620":1397,"621":70,"622":1396,"1572":1398,"fund_retire":70,"fund_end":70,"dissolve_refunded":1399,"buyback_vstoken_by_stable_pool":1400},"1525":{"register_token_metadata":1414,"register_vtoken_metadata":1415,"register_location":1416,"force_set_location":1416,"update_currency_metadata":1417},"1526":{"415":1428,"1313":1426,"1572":1427,"rebond_by_unlock_id":1429,"set_unlock_duration":1430,"set_minimum_mint":1431,"set_minimum_redeem":1431,"add_support_rebond_token":1432,"remove_support_rebond_token":1432,"set_fees":1433,"set_hook_iteration_limit":1434,"set_unlocking_total":1428,"set_min_time_unit":1435,"set_ongoing_time_unit":1435,"mint_with_lock":1426,"unlock_incentive_minted_vtoken":1436,"set_incentive_coef":1437,"set_vtoken_incentive_lock_blocks":1438,"set_supported_eth":1439,"set_v_currency_issuance":1440},"1527":{"396":1477,"397":1477,"398":1477,"402":1478,"415":1479,"434":1482,"438":1480,"439":1480,"1573":1484,"1574":1485,"1575":1435,"1576":1492,"1577":1493,"1578":1493,"1579":1493,"initialize_delegator":1476,"unbond_all":1478,"redelegate":1481,"liquidize":1483,"convert_asset":1486,"increase_token_pool":1487,"decrease_token_pool":1487,"refund_currency_due_unbond":1432,"supplement_fee_reserve":1488,"charge_host_fee_and_tune_vtoken_exchange_rate":1489,"set_operate_origin":1490,"set_fee_source":1491,"set_validators_by_delegator":1494,"set_delegator_ledger":1495,"set_minimums_and_maximums":1496,"set_currency_delays":1497,"set_hosting_fees":1498,"set_currency_tune_exchange_rate_limit":1499,"set_ongoing_time_unit_update_interval":1500,"add_supplement_fee_account_to_whitelist":1493,"remove_supplement_fee_account_from_whitelist":1493,"confirm_delegator_ledger_query_response":1501,"fail_delegator_ledger_query_response":1501,"confirm_validators_by_delegator_query_response":1501,"fail_validators_by_delegator_query_response":1501,"confirm_delegator_ledger":1502,"confirm_validators_by_delegator":1502,"reset_validators":1503,"set_validator_boost_list":1503,"add_to_validator_boost_list":1493,"remove_from_validator_boot_list":1493,"convert_treasury_vtoken":1504,"clean_outdated_validator_boost_list":1505},"1528":{"update_xcm_dest_weight_and_fee":1539,"transfer_ethereum_assets":1540},"1530":{"vsbond_convert_to_vstoken":1545,"vstoken_convert_to_vsbond":1546,"set_exchange_fee":1547,"set_exchange_rate":1548,"set_relaychain_lease":1549},"1531":{"382":1569,"437":1574,"619":1568,"1580":1566,"1581":130,"create_farming_pool":1565,"deposit":1567,"withdraw_claim":1569,"force_retire_pool":1569,"set_retire_limit":1434,"close_pool":1569,"reset_pool":1570,"kill_pool":1569,"edit_pool":1571,"force_gauge_claim":1572,"add_boost_pool_whitelist":1573,"set_next_round_whitelist":1573,"start_boost_round":1575,"end_boost_round":130,"charge_boost":1576},"1532":{"434":1591,"token_config":1590,"delete_token":1591,"refresh_token_info":1591},"1533":{"create_distribution":1599,"edit_distribution":1600,"set_era_length":1601,"execute_distribute":1602,"delete_distribution":1602,"set_usd_config":1603},"1534":{"cross_out":1487,"register_linked_account":1614,"change_outer_linked_account":1615,"deregister_currency_for_cross_in_out":1432,"add_to_register_whitelist":1616,"remove_from_register_whitelist":1616,"set_crossing_minimum_amount":1617},"1536":{"619":1639,"1581":1432,"set_config":1635,"create_lock":1636,"increase_amount":1637,"increase_unlock_time":1638,"notify_rewards":1640,"get_rewards":130,"redeem_unlock":1639,"set_markup_coefficient":1641,"deposit_markup":1642,"withdraw_markup":1432},"1537":{"1313":1661,"1572":1662,"add_whitelist":1663,"remove_whitelist":1663,"set_execution_fee":1664,"set_transfer_to_fee":1665,"support_xcm_oracle":1666,"set_xcm_oracle_configuration":1667,"set_currency_support_xcm_fee":1666,"set_delay_block":1668,"force_add_order":1669,"mint_with_channel_id":1670,"evm_create_order":1671,"set_hyperbridge_oracle":1672,"set_hydration_oracle":1673,"async_mint":1674,"update_async_mint_config":1675,"force_increase_hyperbridge_reserve":1676,"set_hyperbridge_fee_exempt_accounts":1677},"1542":{"437":1695,"1582":1693,"1583":1693,"1584":1693,"1585":1694,"1586":1696,"1587":1697},"1543":108,"1544":14,"1545":{"606":1725,"1571":1724,"create_pool":1723,"redeem_proportion":1726,"redeem_single":1727,"redeem_multi":1728,"modify_a":1729,"modify_fees":1730,"modify_recipients":1731,"edit_token_rate":1732,"config_vtoken_auto_refresh":1733,"remove_vtoken_auto_refresh":1734},"1546":{"437":1745,"438":1756,"439":1734,"440":1746,"1576":1749,"remove_delegator_vote":1747,"kill_referendum":1748,"set_referendum_status":1750,"set_vote_locking_period":1751,"set_undeciding_timeout":1752,"notify_vote":1753,"notify_remove_delegator_vote":1753,"set_vote_cap_ratio":1754,"update_referendum_vote_status":1755,"delegate_vote":1745},"1547":{"1313":1785,"1572":1786,"add_market":1778,"activate_market":1779,"update_rate_model":1780,"update_market":1781,"force_update_market":1778,"add_reward":1782,"withdraw_missing_reward":1783,"update_market_reward_speed":1784,"claim_reward":130,"claim_reward_for_market":1779,"redeem_all":1779,"borrow":1787,"repay_borrow":1788,"repay_borrow_all":1779,"collateral_asset":1789,"liquidate_borrow":1790,"add_reserves":1791,"reduce_reserves":1792,"reduce_incentive_reserves":1793,"update_liquidation_free_collateral":1794,"add_market_bond":1795},"1548":{"set_price":1807,"reset_price":1779,"set_foreign_asset":1808},"1552":{"1588":1812},"1553":{"1582":1693,"1585":1693,"1589":1815,"1590":1816,"1591":1817,"1592":1693,"1593":130},"1554":{"flash_loan_deposit":1818},"1555":{"register_channel":1822,"remove_channel":1823,"update_channel_receive_account":1824,"set_channel_commission_token":1825,"set_commission_tokens":1826,"claim_commissions":1823,"set_channel_vtoken_shares":1827},"1556":{"clouds_to_vebnc":1844,"charge_vbnc":1782},"1557":{"1580":1642,"set_vtoken":1848,"remove_vtoken":1432},"1558":{"1573":1864,"1574":1863,"1575":1865,"1576":1859,"1577":1860,"1578":1861,"1579":1861,"set_protocol_configuration":1858,"set_ledger":1862,"update_token_exchange_rate":1866,"astar_dapp_staking":1867,"notify_astar_dapp_staking":1753,"ethereum_staking":1868}},"910":{"19":{"659":25,"660":1132,"661":27,"662":28,"663":28,"664":29,"665":30,"666":1133},"24":{"667":45,"668":45,"669":1211,"670":47,"671":48,"672":48,"673":48,"674":48,"675":48,"676":49},"28":115,"49":14,"51":116,"58":117,"61":118,"63":14,"119":121,"136":{"691":189,"729":185,"730":186,"731":187,"732":188,"733":190,"734":191,"735":1260,"736":74,"737":74,"738":74,"739":74},"139":124,"145":125,"146":14,"148":{"761":221,"762":221,"763":1196},"151":127,"154":{"767":1202,"768":27,"769":27,"770":27,"771":1203,"772":1204,"773":27,"774":1205},"157":{"683":263,"775":1204,"776":1220,"777":261,"778":1221,"779":1221},"159":{"683":274,"780":270,"781":271,"782":1224,"783":273},"338":146,"1157":147,"1159":14,"1175":{"707":1188,"1345":742,"1346":1169,"1347":1170,"1348":1171,"1349":1172,"1350":1173,"1351":1174,"1352":1174,"1353":1175,"1354":1174,"1355":1176,"1356":1177,"1357":1178,"1358":1179,"1359":1179,"1360":1180,"1361":1181,"1362":1182,"1363":1183,"1364":1183,"1365":1184,"1366":1185,"1367":1186,"1368":1187,"1369":765,"1370":766,"1371":767,"1372":767,"1373":768,"ReservedForParachainBond":311,"ParachainBondAccountSet":1189,"ParachainBondReservePercentSet":767},"1193":155,"1203":148,"1209":149,"1224":151,"1225":152,"1226":143,"1241":154,"1506":156,"1507":14,"1508":14,"1509":14,"1510":14,"1511":{"Bound":1271,"DeployerAdded":1272,"DeployerRemoved":1272},"1512":157,"1513":{"684":1287,"685":1287,"686":1288,"687":1290,"688":1287,"689":1287,"690":1289,"693":1292,"699":1291,"700":1291,"701":1287,"702":1287,"712":1287,"1430":1287,"TotalIssuanceSet":1291,"LockSet":1293,"LockRemoved":1294},"1514":14,"1515":{"712":1298,"1430":1298},"1516":{"875":1299},"1517":{"694":1326,"695":1326,"1414":1325,"1597":1328,"PairCreated":1327,"LiquidityRemoved":1329,"AssetSwap":1330,"TransferredToParachain":1331,"BootstrapContribute":1332,"BootstrapEnd":1333,"BootstrapCreated":1334,"BootstrapClaim":1335,"BootstrapUpdate":1334,"BootstrapRefund":1336,"DistributeReward":1337,"ChargeReward":1337,"WithdrawReward":1338},"1519":{"StateMachineUpdated":1351,"StateCommitmentVetoed":1352,"ConsensusClientCreated":1353,"ConsensusClientFrozen":1353,"Response":1354,"Request":1355,"Errors":1356,"PostRequestHandled":1357,"PostResponseHandled":1357,"GetRequestHandled":1357,"PostRequestTimeoutHandled":1358,"PostResponseTimeoutHandled":1358,"GetRequestTimeoutHandled":1358},"1520":{"ParachainsAdded":1362,"ParachainsRemoved":1363},"1521":{"HostParamsUpdated":1365,"RelayerFeeWithdrawn":90,"ProtocolRevenueWithdrawn":90},"1522":{"AssetTeleported":1377,"AssetReceived":1378,"AssetRefunded":1378,"ERC6160AssetRegistrationDispatched":1379,"WhitelistReset":1380},"1523":{"1598":1388,"SetDefaultFeeCurrency":1389,"SetFeeCurrencyList":1390,"SetExtraFee":1391},"1524":{"688":1408,"702":1402,"802":415,"863":1402,"864":1403,"866":415,"867":415,"869":415,"1599":1404,"Contributing":1401,"ContributeFailed":1402,"Refunded":1404,"AllUnlocked":415,"Failed":415,"Success":415,"Retired":415,"End":415,"Continued":1405,"RefundedDissolved":1405,"Buyback":1406,"VstokenUnlocked":203,"BuybackByStablePool":1407,"ReservationCancelled":466,"ReservationFullyHandled":465,"ReservationHandled":465},"1525":{"1600":1418,"AssetUpdated":1418,"CurrencyIdRegistered":1419,"LocationSet":1420,"CurrencyIdUpdated":1419},"1526":{"694":1441,"1599":1442,"RedeemSuccess":1443,"Rebonded":1444,"RebondedByUnlockId":1445,"UnlockDurationSet":1446,"MinimumMintSet":1447,"MinimumRedeemSet":1447,"SupportRebondTokenAdded":1448,"SupportRebondTokenRemoved":1448,"FeeSet":1449,"HookIterationLimitSet":1450,"UnlockingTotalSet":1451,"MinTimeUnitSet":1452,"FastRedeemFailed":1453,"SetOngoingTimeUnit":1452,"IncentivizedMinting":1454,"VtokenIncentiveCoefSet":1455,"VtokenIncentiveLockBlocksSet":1456,"SupportedEthSet":1457,"VtokenIssuanceSet":1458},"1527":{"740":1512,"741":1513,"1598":1516,"1601":1514,"1602":1516,"1603":1518,"1604":1521,"DelegatorInitialized":1506,"DelegatorBonded":1507,"DelegatorBondExtra":1508,"DelegatorUnbond":1509,"DelegatorUnbondAll":1510,"DelegatorRebond":1511,"Liquidize":1515,"Chill":1510,"ConvertAsset":1517,"DelegatorRemoved":1506,"ValidatorsAdded":1519,"ValidatorsRemoved":1519,"Refund":1520,"FundMoveFromExitToEntrance":1291,"PoolTokenIncreased":1291,"HostingFeeCharged":1291,"PoolTokenDecreased":1291,"FeeSupplemented":1516,"ValidatorsByDelegatorSet":1522,"OperateOriginSet":1523,"FeeSourceSet":1524,"DelegatorLedgerSet":1525,"DelegatorLedgerQueryResponseConfirmed":1526,"DelegatorLedgerQueryResponseFailed":540,"ValidatorsByDelegatorQueryResponseConfirmed":1527,"ValidatorsByDelegatorQueryResponseFailed":540,"MinimumsMaximumsSet":1528,"CurrencyDelaysSet":1529,"HostingFeesSet":1530,"CurrencyTuneExchangeRateLimitSet":1531,"OngoingTimeUnitUpdateIntervalSet":1532,"SupplementFeeAccountWhitelistAdded":1533,"SupplementFeeAccountWhitelistRemoved":1533,"ValidatorsReset":1534,"ValidatorBoostListSet":1535,"ValidatorBoostListAdded":1536,"RemovedFromBoostList":1533,"OutdatedValidatorBoostListCleaned":1537,"BurnFeeFailed":1291},"1528":{"XcmDestWeightAndFeeUpdated":1541,"TransferredEthereumAssets":1542},"1530":{"VsbondConvertToVsksm":1550,"VsksmConvertToVsbond":1550,"VsbondConvertToVsdot":1551,"VsdotConvertToVsbond":1551,"VsbondConvertToVstoken":1552,"VstokenConvertToVsbond":1552,"ExchangeFeeSet":1553,"ExchangeRateSet":1554,"RelaychainLeaseSet":1555},"1531":{"712":1580,"742":1587,"764":1581,"1430":1579,"1605":1578,"FarmingPoolCreated":1577,"FarmingPoolReset":1577,"FarmingPoolClosed":1577,"FarmingPoolKilled":1577,"FarmingPoolEdited":1577,"WithdrawClaimed":1581,"GaugeWithdrawn":1582,"AllForceGaugeClaimed":1583,"PartiallyForceGaugeClaimed":1583,"AllRetired":1577,"PartiallyRetired":1577,"RetireLimitSet":1450,"RoundEnd":1584,"RoundStartError":1585,"RoundStart":1586,"BoostCharged":1588},"1532":{"1345":1592,"1599":1594,"1601":1596,"TokenConfigChanged":1593,"DepositFailed":1594,"MintSuccess":1594,"MintFailed":1594,"WithdrawSuccess":1594,"WithdrawFailed":1594,"RedeemFailed":1594,"VtokenNotFound":1595,"TokenInfoRefreshed":1595,"PayoutFailed":1595},"1533":{"802":1604,"869":1604,"1402":1606,"EraLengthSet":1605,"Deleted":1606,"ExecuteFailed":1607,"USDConfigSet":1608},"1534":{"CrossedOut":1618,"CurrencyDeregistered":1448,"LinkedAccountRegistered":1619,"AddedToRegisterList":1620,"RemovedFromRegisterList":1620,"CrossingMinimumAmountSet":1621},"1536":{"694":1644,"707":1588,"712":1648,"1535":1645,"1606":1643,"1607":1650,"LockCreated":1646,"UnlockTimeIncreased":1647,"AmountIncreased":1648,"IncentiveSet":1649,"AllRefreshed":1448,"PartiallyRefreshed":1448,"NotifyRewardFailed":1650,"MarkupDeposited":1651,"MarkupWithdrawn":1652},"1537":{"AddWhitelistAccountId":1678,"RemoveWhitelistAccountId":1678,"SetTransferToFee":1679,"SetExecutionFee":1680,"SupportXcmOracle":1681,"SetXcmOracleConfiguration":1682,"XcmOracle":1683,"SetCurrencyToSupportXcmFee":1681,"SetDelayBlock":1684,"CreateOrder":1685,"OrderHandled":1685,"OrderFailed":1685,"XcmOracleFailed":1203,"InsufficientAssets":27,"SetHyperBridgeOracleConfig":1686,"SetHydrationOracleConfig":1687,"AsyncMintExecuted":1688,"AsyncMintConfigUpdated":1689,"AsyncMintExecutionFailed":1690},"1542":158,"1543":159,"1544":{"1597":1708,"CreatePool":1707,"TokenSwapped":1709,"RedeemedProportion":1710,"RedeemedSingle":1711,"RedeemedMulti":1712,"BalanceUpdated":1713,"YieldCollected":1714,"FeeCollected":1715,"AModified":1716,"FeeModified":1717,"RecipientModified":1718,"TokenRateSet":1719,"TokenRateHardcapConfigured":1720,"TokenRateHardcapRemoved":1721,"TokenRateRefreshFailed":354,"RateAdjustmentLimited":1722},"1545":14,"1546":{"702":1758,"740":1769,"741":203,"742":1757,"1603":1760,"DelegatorVoteRemoved":1759,"ReferendumInfoCreated":1761,"ReferendumInfoSet":1761,"VoteLockingPeriodSet":1762,"UndecidingTimeoutSet":1763,"ReferendumKilled":1764,"VoteNotified":1765,"DelegatorVoteRemovedNotified":1765,"ResponseReceived":1766,"VoteCapRatioSet":1767,"ReferendumStatusUpdated":1768},"1547":{"1430":1797,"1599":1797,"1607":1802,"CollateralAssetAdded":1796,"CollateralAssetRemoved":1796,"Borrowed":1797,"RepaidBorrow":1797,"LiquidatedBorrow":1798,"ReservesReduced":1799,"ReservesAdded":1799,"NewMarket":1800,"ActivatedMarket":1801,"UpdatedMarket":1800,"RewardWithdrawn":1802,"MarketRewardSpeedUpdated":1803,"DistributedSupplierReward":1804,"DistributedBorrowerReward":1804,"RewardPaid":1802,"IncentiveReservesReduced":1797,"LiquidationFreeCollateralsUpdated":1805,"MarketBonded":1806},"1548":{"SetPrice":1809,"ResetPrice":1801},"1552":{"1611":1813,"FeedValueReachingLimit":1814},"1553":160,"1554":{"FlashLoanDeposited":1819},"1555":{"ChannelRegistered":1828,"ChannelRemoved":1829,"ChannelReceiveAccountUpdated":1830,"CommissionTokenSet":1831,"ChannelCommissionSet":1832,"CommissionClaimed":1833,"ChannelVtokenSharesUpdated":1834,"VtokenIssuanceSnapshotUpdated":1835,"PeriodVtokenTotalMintUpdated":1836,"PeriodVtokenTotalRedeemUpdated":1837,"PeriodChannelVtokenMintUpdated":1838,"PeriodTotalCommissionsUpdated":1839,"ChannelClaimableCommissionUpdated":1833,"CalculationFailed":1840,"BifrostCommissionTransferFailed":1841,"RemovalNotCompleteError":1842,"SetClearingEnvironmentFailed":1843},"1556":{"CloudsConverted":1845,"VbncCharged":1846},"1557":{"1605":1651,"1606":1849,"Removed":1448,"BuyBackFailed":1850,"BuyBackSuccess":1850,"AddLiquidityFailed":1850,"AddLiquiditySuccess":1850,"SetSwapOutMinFailed":1850,"SetSwapOutMinSuccess":1850},"1558":{"1598":1877,"1602":1878,"1604":1875,"AddDelegator":1869,"RemoveDelegator":1869,"AddValidator":1870,"RemoveValidator":1870,"SetConfiguration":1871,"SetLedger":1872,"SendXcmTask":1873,"NotifyResponseReceived":1874,"TokenExchangeRateUpdated":1876,"EthereumStaking":1879}},"1009":{"19":163,"24":164,"28":14,"49":166,"51":167,"58":168,"61":169,"63":14,"119":14,"136":172,"139":173,"145":174,"146":14,"148":14,"151":176,"154":177,"157":178,"159":179,"338":194,"1157":195,"1159":14,"1175":{"938":181,"1442":1,"1443":1,"1444":1,"1445":1,"1446":1,"1447":1,"1448":1,"1449":1,"1450":1,"1451":1,"1452":1,"1453":57,"1454":57,"MinCollatorStk":57,"MinDelegatorStk":57,"AllowInflation":2,"PaymentInRound":57,"ToMigrateInvulnables":101,"InitSeedStk":57},"1193":196,"1203":14,"1209":14,"1224":198,"1225":14,"1226":{"1004":1,"UniversalLocation":492,"MaxLockers":1,"MaxRemoteLockConsumers":1},"1241":200,"1506":201,"1507":202,"1508":14,"1509":14,"1510":14,"1511":{"FeeMultiplier":1},"1512":203,"1513":{"925":1,"926":1},"1514":{"GetNativeCurrencyId":1295},"1515":14,"1516":14,"1517":{"938":181},"1519":14,"1520":14,"1521":14,"1522":204,"1523":{"938":181,"1158":1,"1619":100,"MaxFeeCurrencyOrderListLen":1,"MinAssetHubExecutionFee":57,"MinRelaychainExecutionFee":57,"RelaychainCurrencyId":1295,"AllowVBNCAsFee":2},"1524":{"938":181,"994":1,"1000":57,"1001":1,"1619":100,"1620":1295,"VSBondValidPeriod":1,"ReleaseCycle":1,"ReleaseRatio":1,"SlotLength":1,"BuybackPalletId":181},"1525":14,"1526":{"1620":1295,"MaximumUnlockIdOfUser":1,"MaximumUnlockIdOfTimeUnit":1,"MaxLockRecords":1,"EntranceAccount":181,"ExitAccount":181,"FeeAccount":100,"RedeemFeeAccount":100,"IncentivePoolAccount":181,"MoonbeamChainId":1},"1527":{"1618":1,"1619":100,"MaxTypeEntryPerBlock":1,"MaxRefundPerBlock":1},"1528":51,"1530":{"1619":100,"RelayCurrencyId":1295,"VsbondAccount":181},"1531":{"1619":100,"Keeper":181,"RewardIssuer":181,"FarmingBoost":181,"WhitelistMaximumLimit":1,"GaugeRewardIssuer":181},"1532":{"938":181,"BenefitReceivingAccount":100,"MaxTokenLen":1,"MaxFarmingPoolIdLen":1,"BlocksPerRound":1},"1533":{"FeeSharePalletId":181},"1534":204,"1536":{"1621":181,"TokenType":1295,"IncentivePalletId":181,"Week":1,"MaxBlock":1,"Multiplier":57,"VoteWeightMultiplier":57,"MaxPositions":1,"MarkupRefreshLimit":1,"OneYear":1,"FiveYears":1},"1537":{"938":181,"1158":1,"1619":100,"MaxOrderSize":1,"MaxUserOrderSize":1},"1542":14,"1543":174,"1544":{"938":181,"FeePrecision":57,"SwapExactOverAmount":57,"APrecision":57,"PoolAssetLimit":1},"1545":14,"1546":{"938":181,"942":1,"1158":1,"1622":1,"ReferendumCheckInterval":1,"RelayVCurrency":1295,"MaxVotesPerDelegate":1},"1547":{"938":181,"1618":1,"RewardAssetId":1295,"LiquidationFreeAssetId":1295},"1548":{"RelayCurrency":1295},"1552":205,"1553":14,"1554":14,"1555":{"ClearingDuration":1,"NameLengthLimit":1},"1556":{"LockedBlocks":1},"1557":{"1619":100,"1621":181,"LiquidityAccount":181},"1558":{"1158":1,"1622":1,"CommissionPalletId":181,"MaxValidators":1}},"1010":{"19":14,"24":14,"28":14,"49":14,"51":14,"58":14,"61":14,"63":14,"119":14,"136":14,"139":14,"145":14,"146":14,"148":14,"151":14,"154":14,"157":14,"159":14,"338":14,"1157":14,"1159":14,"1175":14,"1193":14,"1203":14,"1209":14,"1224":14,"1225":14,"1226":14,"1241":14,"1506":14,"1507":14,"1508":14,"1509":14,"1510":14,"1511":14,"1512":14,"1513":14,"1514":14,"1515":14,"1516":14,"1517":14,"1519":14,"1520":14,"1521":14,"1522":14,"1523":14,"1524":14,"1525":14,"1526":14,"1527":14,"1528":14,"1530":14,"1531":14,"1532":14,"1533":14,"1534":14,"1536":14,"1537":14,"1542":14,"1543":14,"1544":14,"1545":14,"1546":14,"1547":14,"1548":14,"1552":14,"1553":14,"1554":14,"1555":14,"1556":14,"1557":14,"1558":14},"1133":{"201":207,"1016":209,"1024":{"1020":1880,"1021":584,"1022":585,"1023":586},"1040":212,"1042":213,"1108":221,"1110":222,"1115":223,"1123":224,"1126":{"1124":1901,"1125":1902},"1128":225,"1132":226,"1500":{"511":1882,"1300":1881,"1485":1886,"1486":644,"1487":1109,"1488":1110,"1489":1111,"1490":1112,"1491":1113,"1492":1883,"1493":1884,"1494":1118,"1495":1885,"1496":628,"1497":1121,"1498":1887,"1499":599},"1502":{"1501":1888},"1504":228,"1627":230,"1628":229,"EvmAccountsApi":{"evm_address":1889,"bound_account_id":1890,"account_id":1891},"IsmpRuntimeApi":{"host_state_machine":1892,"block_events":1893,"block_events_with_metadata":1894,"consensus_state":1895,"state_machine_update_time":1896,"challenge_period":1897,"latest_state_machine_height":1897,"requests":1898,"responses":1899},"IsmpParachainApi":{"para_ids":582,"current_relay_chain_state":1900},"FlexibleFeeRuntimeApi":{"get_fee_token_and_amount":1903},"ZenlinkProtocolApi":{"get_balance":1904,"get_pair_by_asset_id":1905,"get_amount_in_price":1906,"get_amount_out_price":1906,"get_estimate_lptoken":1907,"calculate_remove_liquidity":1908},"SalpRuntimeApi":{"get_contribution":1909},"FarmingRuntimeApi":{"get_farming_rewards":1910,"get_gauge_rewards":1910},"BbBNCRuntimeApi":{"balance_of":1911,"total_supply":1912,"find_block_epoch":1913,"bonus":1914,"query_pending_rewards":1915},"LendMarketApi":{"get_account_liquidity":1916,"get_market_status":1917,"get_liquidation_threshold_liquidity":1916},"StablePoolRuntimeApi":{"get_swap_output":1918,"add_liquidity_amount":1919},"VtokenMintingRuntimeApi":{"get_v_currency_amount_by_currency_amount":1920,"get_currency_amount_by_v_currency_amount":1921}}},"astar":{"351":{"19":{"0":0,"1":1,"2":2,"3":3,"4":1,"5":4,"6":5,"7":1,"8":6,"9":7,"10":1922,"11":1,"12":9,"13":10,"14":2,"15":2,"16":11,"17":12},"24":{"20":1,"21":1949,"22":34,"23":35},"28":0,"49":2,"58":{"0":76,"52":57,"53":57,"54":77,"55":78,"56":1955,"57":1956},"61":4,"63":5,"119":{"74":101,"113":1,"114":2,"115":1147,"116":179,"117":1148,"118":168},"136":63,"151":17,"154":14,"157":{"155":1941,"156":252},"159":18,"338":49,"1012":{"ActiveInflationConfig":1957,"InflationParams":1958,"DoRecalculation":1},"1157":50,"1159":51,"1193":58,"1203":53,"1209":54,"1224":56,"1225":14,"1226":{"319":57,"320":509,"321":405,"322":1,"323":510,"324":511,"325":512,"326":513,"327":514,"328":515,"329":516,"330":2,"331":2,"332":517},"1229":{"0":2003,"132":2004,"201":942,"1227":2002,"1228":57},"1241":57,"1506":59,"1507":60,"1508":{"30":177,"1181":788},"1512":14,"1552":{"1549":2034,"1550":2035,"1551":101},"1553":62,"1629":{"72":1964,"ActiveProtocolState":1962,"NextDAppId":1,"IntegratedDApps":1963,"CounterForIntegratedDApps":1,"StakerInfo":1965,"ContractStake":1966,"CurrentEraInfo":1967,"EraRewards":1968,"PeriodEnd":1969,"StaticTierParams":1970,"TierConfig":1971,"DAppTiers":1972,"HistoryCleanupMarker":1973,"Safeguard":2},"1630":{"CurrentBlockValues":315,"IntermediateValueAggregator":2032,"ValuesCircularBuffer":2033},"1632":{"66":101,"1631":2041,"NonCandidates":2042,"LastAuthoredBlock":326,"DesiredCandidates":1,"CandidacyBond":57,"SlashDestination":100},"1633":{"AssetIdToLocation":2049,"AssetLocationToId":2050,"AssetLocationUnitsPerSecond":2050},"1634":{"BaseFeePerGas":1011},"1635":{"1232":57,"PristineCode":406,"CodeInfoOf":2063,"ContractInfoOf":2064,"DeletionQueue":5,"DeletionQueueCounter":2065,"MigrationInProgress":227},"1636":{"Key":100},"1637":62,"1638":62,"1639":62,"1640":64,"1641":64,"1642":64,"1643":{"140":1,"144":2105,"PublicPropCount":1,"PublicProps":2099,"DepositOf":2100,"LowestUnbaked":1,"ReferendumInfoOf":2101,"VotingOf":2102,"LastTabledWasExternal":2,"NextExternal":2103,"Blacklist":2104,"Cancellations":1346},"1644":63,"1645":14,"1646":{"EnteredUntil":1,"Deposits":472}},"658":{"19":65,"24":{"363":1950,"364":37,"365":1951,"366":39,"367":1952,"368":1953,"369":42,"370":43,"371":44,"372":39},"28":66,"49":68,"58":70,"61":14,"63":14,"119":107,"136":111,"151":77,"154":{"465":1924,"466":1925,"467":1924,"468":1926,"469":1924,"470":1927},"157":{"473":1942,"474":1943,"475":1943,"476":130,"477":1944,"478":1945,"479":257,"480":257,"481":258,"482":1946},"159":{"483":1938,"484":1939,"485":267,"486":268},"338":100,"1012":{"force_set_inflation_params":1959,"force_inflation_recalculation":1960,"force_readjust_config":130},"1157":101,"1159":14,"1193":{"1275":1931,"1276":818,"1277":1234,"1278":130,"1279":820,"1280":821,"1281":822,"1282":71,"1283":824,"1284":1932,"1285":236,"1286":1933,"1287":1933,"1288":1934,"1289":130,"1290":1935,"1291":1936,"1292":1937,"1293":832,"1294":832,"1295":832,"1296":832,"1297":832,"1298":832},"1203":102,"1209":103,"1224":109,"1225":14,"1226":105,"1229":{"383":2009,"385":2010,"386":2011,"389":2009,"390":2019,"395":2008,"450":953,"511":2005,"620":960,"1308":2006,"1309":945,"1310":945,"1311":945,"1312":945,"1313":2007,"1314":2011,"1315":945,"1316":945,"1317":2012,"1318":2013,"1319":945,"1320":954,"1321":945,"1322":2014,"1323":2015,"1324":2016,"1325":2017,"1326":2018,"1327":945,"1328":961,"1329":2011,"1330":2011,"1331":2011},"1241":106,"1506":110,"1507":14,"1508":14,"1512":{"383":2058,"1566":1274,"1567":2059,"1568":1276,"1569":2060,"1570":1278},"1552":{"1588":2036},"1553":112,"1629":{"399":130,"440":1782,"604":1976,"unbond_and_unstake":1974,"maintenance_mode":1975,"set_dapp_reward_beneficiary":1977,"set_dapp_owner":1978,"unregister":1979,"lock":1782,"claim_unlocked":130,"relock_unlocking":130,"stake":1980,"unstake":1980,"claim_staker_rewards":130,"claim_bonus_reward":1979,"claim_dapp_reward":1981,"unstake_from_unregistered":1979,"cleanup_expired_entries":130,"force":1982,"claim_staker_rewards_for":1983,"claim_bonus_reward_for":1984,"move_stake":1985,"set_static_tier_params":1986},"1630":14,"1632":{"410":2043,"set_desired_candidates":2044,"set_candidacy_bond":2045,"register_as_candidate":130,"leave_intent":130,"withdraw_bond":130,"set_slash_destination":2046,"add_invulnerable":2047,"remove_invulnerable":2047},"1633":{"1332":1031,"register_asset_location":2051,"set_asset_units_per_second":2052,"change_existing_asset_location":2053,"remove_payment_asset":1000},"1634":{"set_base_fee_per_gas":2061},"1635":{"354":2072,"1300":2073,"1647":2071,"1648":2075,"call_old_weight":2068,"instantiate_with_code_old_weight":2069,"instantiate_old_weight":2070,"remove_code":24,"instantiate_with_code":2074,"migrate":2076},"1636":{"sudo":2085,"sudo_unchecked_weight":1927,"set_key":2040,"sudo_as":2086,"remove_key":130},"1637":112,"1638":112,"1639":112,"1640":113,"1641":113,"1642":113,"1643":{"437":2108,"438":2112,"439":130,"440":236,"441":70,"442":2113,"450":2116,"1304":2106,"second":2107,"emergency_cancel":2109,"external_propose":2110,"external_propose_majority":2110,"external_propose_default":2110,"fast_track":2111,"veto_external":906,"cancel_referendum":2109,"clear_public_proposals":130,"blacklist":2114,"cancel_proposal":2115},"1644":111,"1645":{"execute_call":2085},"1646":{"577":130,"force_enter":130,"extend":130,"force_extend":130,"force_exit":130,"force_slash_deposit":2129,"release_deposit":2129,"force_release_deposit":2129}},"910":{"19":{"659":25,"660":1923,"661":27,"662":28,"663":28,"664":29,"665":30},"24":{"667":45,"668":45,"669":1954,"670":47,"671":48,"672":48,"673":48,"674":48,"675":48},"28":115,"49":14,"58":117,"61":118,"63":14,"119":{"723":152},"136":161,"151":127,"154":{"767":1928,"768":27,"769":27,"770":27,"771":1929,"772":1930},"157":{"775":1930,"776":1947,"777":261,"778":1948,"779":1948},"159":{"780":270,"781":271,"782":1940,"783":273},"338":146,"1012":{"InflationParametersForceChanged":27,"ForcedInflationRecalculation":1961,"NewInflationConfiguration":1961},"1157":147,"1159":14,"1193":155,"1203":148,"1209":149,"1224":151,"1225":152,"1226":153,"1229":{"288":2026,"695":2023,"699":2021,"703":2026,"712":2031,"759":973,"760":970,"802":2020,"804":970,"1414":2022,"1415":2024,"1416":2025,"1417":970,"1418":970,"1419":971,"1420":972,"1421":970,"1422":2025,"1423":2027,"1424":2028,"1425":2029,"1426":970,"1427":977,"1428":2030,"1429":2026,"1430":2031},"1241":154,"1506":156,"1507":14,"1508":14,"1512":157,"1552":{"1611":2037},"1553":160,"1629":{"701":90,"1183":1987,"NewEra":1988,"NewSubperiod":1989,"DAppRegistered":1990,"DAppRewardDestinationUpdated":1991,"DAppOwnerChanged":1992,"DAppUnregistered":1993,"Unlocking":90,"ClaimedUnlocked":90,"Relock":90,"Stake":1994,"Unstake":1994,"Reward":1995,"BonusReward":1996,"DAppReward":1997,"UnstakeFromUnregistered":1994,"ExpiredEntriesRemoved":1998,"Force":1999,"StakeMoved":2000,"NewTierParameters":2001},"1630":{"AverageAggregatedValue":189},"1632":{"NewInvulnerables":2048,"NewDesiredCandidates":415,"NewCandidacyBond":1406,"CandidateAdded":1802,"CandidateRemoved":203,"CandidateSlashed":203},"1633":{"1431":2055,"1433":2057,"1600":2054,"AssetLocationChanged":2056,"AssetRemoved":2054},"1634":{"NewBaseFeePerGas":2062},"1635":{"Instantiated":2077,"Terminated":2078,"CodeStored":2079,"ContractEmitted":2080,"CodeRemoved":2081,"ContractCodeUpdated":2082,"Called":2083,"DelegateCalled":2084,"StorageDepositTransferredAndHeld":91,"StorageDepositTransferredAndReleased":91},"1636":{"1614":2088,"Sudid":2087,"KeyRemoved":27,"SudoAsDone":2087},"1637":160,"1638":160,"1639":160,"1640":162,"1641":162,"1642":162,"1643":{"740":1769,"741":28,"742":2121,"756":2119,"759":2124,"760":2124,"1404":2117,"Tabled":2117,"ExternalTabled":27,"Started":2118,"Passed":2119,"NotPassed":2119,"Vetoed":2120,"Blacklisted":910,"Seconded":2122,"ProposalCanceled":2123,"MetadataTransferred":2125},"1644":161,"1645":{"CollectiveProxyExecuted":1930},"1646":{"748":90,"Entered":2130,"Extended":2130,"Exited":2131,"DepositPlaced":90,"DepositReleased":90,"CannotDeposit":27,"CannotRelease":27}},"1009":{"19":163,"24":164,"28":14,"49":166,"58":168,"61":169,"63":14,"119":14,"136":206,"151":176,"154":177,"157":178,"159":179,"338":194,"1012":14,"1157":195,"1159":14,"1193":196,"1203":14,"1209":14,"1224":198,"1225":14,"1226":14,"1229":199,"1241":200,"1506":201,"1507":202,"1508":14,"1512":203,"1552":205,"1553":14,"1629":{"934":1,"BaseNativeCurrencyPrice":57,"EraRewardSpanLength":1,"RewardRetentionInPeriods":1,"MaxNumberOfContracts":1,"MinimumLockedAmount":57,"UnlockingPeriod":1,"MaxNumberOfStakedContracts":1,"MinimumStakeAmount":57,"NumberOfTiers":1,"RankingEnabled":2,"MaxBonusSafeMovesPerPeriod":1},"1630":{"MaxValuesPerBlock":1,"CircularBufferLength":1,"AggregationDuration":1},"1632":14,"1633":14,"1634":14,"1635":{"Schedule":2066,"DepositPerByte":57,"DefaultDepositLimit":57,"DepositPerItem":57,"CodeHashLockupDepositPercent":1,"MaxCodeLen":1,"MaxStorageKeyLen":1,"MaxTransientStorageSize":1,"MaxDelegateDependencies":1,"UnsafeUnstableInterface":2,"MaxDebugBufferLen":1,"Environment":2067,"ApiVersion":1},"1636":14,"1637":14,"1638":14,"1639":14,"1640":197,"1641":197,"1642":197,"1643":{"942":1,"943":1,"1652":1,"EnactmentPeriod":1,"LaunchPeriod":1,"MinimumDeposit":57,"InstantAllowed":2,"FastTrackVotingPeriod":1,"CooloffPeriod":1,"MaxProposals":1,"MaxDeposits":1,"MaxBlacklisted":1},"1644":206,"1645":14,"1646":{"EnterDuration":1,"ExtendDuration":1,"EnterDepositAmount":276,"ExtendDepositAmount":276,"ReleaseDelay":445}},"1010":{"19":14,"24":14,"28":14,"49":14,"58":14,"61":14,"63":14,"119":14,"136":14,"151":14,"154":14,"157":14,"159":14,"338":14,"1012":14,"1157":14,"1159":14,"1193":14,"1203":14,"1209":14,"1224":14,"1225":14,"1226":14,"1229":14,"1241":14,"1506":14,"1507":14,"1508":14,"1512":14,"1552":14,"1553":14,"1629":14,"1630":14,"1632":14,"1633":14,"1634":14,"1635":14,"1636":14,"1637":14,"1638":14,"1639":14,"1640":14,"1641":14,"1642":14,"1643":14,"1644":14,"1645":14,"1646":14},"1133":{"201":207,"1016":209,"1024":{"1020":2132,"1021":584,"1022":585,"1023":586},"1040":212,"1042":213,"1108":221,"1110":222,"1115":223,"1118":{"1113":654,"1114":655,"1116":2133,"1117":2134},"1123":224,"1126":{"1124":2142,"1125":2143},"1132":226,"1500":{"511":2136,"1300":2135,"1485":1120,"1486":644,"1487":1109,"1488":1110,"1489":1111,"1490":1112,"1491":1113,"1492":1116,"1493":1117,"1494":1118,"1495":1119,"1496":628,"1497":1121,"1498":1122,"1499":599},"1502":227,"1504":228,"1627":230,"1628":229,"ContractsApi":{"1300":2137,"1647":2139,"1648":2138,"get_storage":2140},"DappStakingApi":{"periods_per_cycle":606,"eras_per_voting_subperiod":606,"eras_per_build_and_earn_subperiod":606,"blocks_per_era":606,"get_dapp_tier_assignment":2141},"TrustedQueryApi":{"is_trusted_reserve":2144,"is_trusted_teleporter":2144}}},"kusama":{"351":{"19":{"0":0,"1":1,"2":2,"3":3,"4":1,"5":4,"6":5,"7":1,"8":6,"9":7,"10":2145,"11":1,"12":9,"13":10,"14":2,"15":2,"16":11,"17":12,"18":13},"24":{"20":1,"21":2205,"22":34,"23":35},"28":0,"46":1,"49":2,"51":3,"58":{"0":76,"52":57,"53":57,"54":77,"55":78,"56":2148,"57":80},"61":4,"63":5,"106":6,"109":7,"112":8,"119":9,"126":10,"128":11,"136":12,"139":13,"145":{"140":1,"141":2149,"142":207,"143":109,"144":4},"146":14,"148":15,"149":16,"151":17,"154":14,"157":{"155":2211,"156":252},"159":18,"161":19,"167":20,"181":{"171":1,"172":297,"173":298,"174":299,"175":1,"176":300,"177":1,"178":301,"179":2222,"180":303},"185":21,"207":22,"212":23,"217":24,"218":14,"222":25,"227":26,"229":27,"232":28,"236":29,"258":30,"261":31,"265":32,"278":33,"284":34,"289":35,"291":36,"301":38,"304":39,"306":40,"311":41,"316":42,"317":14,"334":43,"338":44,"340":45,"343":46,"347":47,"350":48,"1197":{"1197":2156},"1542":61,"1543":{"140":1,"141":2153,"142":1702,"143":109,"144":4},"1656":{"208":100,"1197":2168,"1213":2169,"1538":1,"1631":2173,"Pot":57,"Founder":100,"Rules":6,"Payouts":2170,"MemberByIndex":2171,"SuspendedMembers":2169,"RoundCount":1,"Bids":2172,"Skeptic":100,"Votes":2174,"VoteClearCursor":1226,"NextHead":2175,"ChallengeRoundCount":1,"Defending":2176,"DefenderVotes":2177},"1657":{"157":102,"Recoverable":2196,"ActiveRecoveries":2197},"1658":{"QueueTotals":2225,"Queues":2226,"Summary":2227,"Receipts":2228},"1659":{"0":76,"52":57,"53":57,"54":77,"55":78,"56":2148,"57":1141},"1660":37},"658":{"19":65,"24":{"363":2206,"364":37,"365":2207,"366":39,"367":2208,"368":2209,"369":42,"370":43,"371":44,"372":39},"28":66,"46":67,"49":68,"51":69,"58":70,"61":14,"63":14,"106":71,"109":14,"112":14,"119":72,"126":73,"128":14,"136":74,"139":75,"145":114,"146":14,"148":{"451":218,"452":218,"453":219,"454":2154},"149":76,"151":77,"154":{"465":2159,"466":2160,"467":2159,"468":2161,"469":2159,"470":2162,"471":2163,"472":2161},"157":{"387":130,"473":2212,"474":2213,"475":2213,"476":130,"477":2214,"478":2215,"479":257,"480":257,"481":258,"482":2216},"159":{"387":269,"483":2219,"484":2220,"485":267,"486":268},"161":78,"167":79,"181":{"443":2224,"501":2223,"502":305,"503":306,"504":308},"185":80,"207":81,"212":82,"217":14,"218":14,"222":83,"227":14,"229":14,"232":84,"236":14,"258":85,"261":86,"265":14,"278":87,"284":14,"289":88,"291":89,"301":14,"304":91,"306":92,"311":93,"316":94,"317":95,"334":96,"338":97,"340":98,"343":99,"347":14,"350":14,"1197":{"1299":2157},"1542":{"437":1695,"1582":2038,"1583":2038,"1584":2038,"1585":2151,"1586":1696,"1587":2152},"1543":114,"1656":{"434":130,"437":2179,"616":126,"621":130,"unbid":130,"vouch":2178,"unvouch":130,"defender_vote":2180,"waive_repay":1782,"found_society":2181,"judge_suspended_member":2182,"set_parameters":2183,"punish_skeptic":130,"claim_membership":130,"bestow_membership":1161,"kick_candidate":1161,"resign_candidacy":130,"drop_candidate":1161,"cleanup_candidacy":2184,"cleanup_challenge":2185},"1657":{"as_recovered":2198,"set_recovered":2199,"create_recovery":2200,"initiate_recovery":1931,"vouch_recovery":2199,"claim_recovery":1931,"close_recovery":2201,"remove_recovery":130,"cancel_recovered":1931},"1658":{"place_bid":2229,"retract_bid":2229,"fund_deficit":130,"thaw_private":2230,"thaw_communal":70,"communify":70,"privatize":70},"1659":70,"1660":90},"910":{"19":{"659":25,"660":2146,"661":27,"662":28,"663":28,"664":29,"665":30,"666":2147},"24":{"667":45,"668":45,"669":2210,"670":47,"671":48,"672":48,"673":48,"674":48,"675":48,"676":49},"28":115,"46":14,"49":14,"51":116,"58":117,"61":118,"63":14,"106":119,"109":120,"112":14,"119":121,"126":122,"128":14,"136":123,"139":124,"145":125,"146":14,"148":{"761":221,"762":221,"763":2155},"149":126,"151":127,"154":{"767":2164,"768":27,"769":27,"770":27,"771":2165,"772":2166,"773":27,"774":2167},"157":{"683":263,"775":2166,"776":2217,"777":261,"778":2218,"779":2218},"159":{"683":274,"780":270,"781":271,"782":2221,"783":273},"161":128,"167":129,"181":130,"185":131,"207":132,"212":{"693":153,"822":2236,"823":374,"824":158,"825":27},"217":133,"218":14,"222":14,"227":14,"229":134,"232":14,"236":14,"258":135,"261":14,"265":14,"278":136,"284":14,"289":137,"291":14,"301":14,"304":139,"306":140,"311":141,"316":{"802":465,"863":489,"864":489,"865":465,"866":465,"867":465,"868":2237,"869":465,"870":491,"871":465},"317":142,"334":143,"338":144,"340":145,"343":14,"347":14,"350":14,"1197":{"1399":2158},"1542":158,"1543":159,"1656":{"691":189,"Founded":2186,"Bid":2187,"Vouch":2188,"AutoUnbid":1174,"Unbid":1174,"Unvouch":1174,"Inducted":2189,"SuspendedMemberJudgement":2190,"CandidateSuspended":1174,"MemberSuspended":2191,"Challenged":2191,"Vote":2192,"DefenderVote":2193,"NewParams":2194,"Unfounded":2186,"Elevated":2195},"1657":{"RecoveryCreated":28,"RecoveryInitiated":2202,"RecoveryVouched":2203,"RecoveryClosed":2202,"AccountRecovered":2202,"RecoveryRemoved":2204},"1658":{"699":2232,"703":2233,"1414":2235,"BidPlaced":2231,"BidRetracted":2231,"BidDropped":2231,"Funded":2234},"1659":117,"1660":138},"1009":{"19":163,"24":164,"28":14,"46":165,"49":166,"51":167,"58":168,"61":169,"63":14,"106":170,"109":14,"112":14,"119":14,"126":171,"128":14,"136":172,"139":173,"145":174,"146":14,"148":14,"149":175,"151":176,"154":177,"157":178,"159":179,"161":180,"167":181,"181":182,"185":183,"207":184,"212":167,"217":185,"218":14,"222":14,"227":14,"229":14,"232":14,"236":14,"258":186,"261":14,"265":14,"278":14,"284":14,"289":14,"291":14,"301":14,"304":188,"306":189,"311":190,"316":191,"317":192,"334":193,"338":194,"340":14,"343":171,"347":14,"350":14,"1197":14,"1542":14,"1543":174,"1656":{"938":181,"1518":1,"1652":1,"GraceStrikes":1,"PeriodSpend":57,"ClaimPeriod":1,"MaxLockDuration":1,"MaxPayouts":1,"MaxBids":1},"1657":{"ConfigDepositBase":57,"FriendDepositFactor":57,"MaxFriends":1,"RecoveryDeposit":57},"1658":{"938":181,"QueueCount":1,"MaxQueueLen":1,"FifoQueueLen":1,"BasePeriod":1,"MinBid":57,"MinReceipt":57,"IntakePeriod":1,"MaxIntakeWeight":13,"ThawThrottle":788},"1659":168,"1660":187},"1010":{"19":14,"24":14,"28":14,"46":14,"49":14,"51":14,"58":14,"61":14,"63":14,"106":14,"109":14,"112":14,"119":14,"126":14,"128":14,"136":14,"139":14,"145":14,"146":14,"148":14,"149":14,"151":14,"154":14,"157":14,"159":14,"161":14,"167":14,"181":14,"185":14,"207":14,"212":14,"217":14,"218":14,"222":14,"227":14,"229":14,"232":14,"236":14,"258":14,"261":14,"265":14,"278":14,"284":14,"289":14,"291":14,"301":14,"304":14,"306":14,"311":14,"316":14,"317":14,"334":14,"338":14,"340":14,"343":14,"347":14,"350":14,"1197":14,"1542":14,"1543":14,"1656":14,"1657":14,"1658":14,"1659":14,"1660":14},"1133":{"201":207,"1012":208,"1016":209,"1024":{"1020":2238,"1021":584,"1022":585,"1023":586},"1035":210,"1038":211,"1040":212,"1042":213,"1077":214,"1085":215,"1091":216,"1094":217,"1098":218,"1103":219,"1105":220,"1108":221,"1110":222,"1115":223,"1118":{"1113":654,"1114":655,"1116":2239,"1117":2240},"1123":224,"1126":{"1124":2241,"1125":2242},"1128":225,"1132":226}}},[{"25":50,"26":51,"27":52},{"29":57,"30":58,"31":57,"32":57,"33":6,"34":59,"35":6,"36":58,"37":1,"38":60,"39":61,"40":62,"41":63,"42":1,"43":64,"44":64,"45":65},{"47":57,"48":2},{"50":69},{"59":57,"60":98},{"62":100},{"64":1,"65":1,"66":101,"67":102,"68":57,"69":57,"70":57,"71":1,"72":103,"73":104,"74":105,"75":1,"76":1,"77":106,"78":1,"79":107,"80":1,"81":1,"82":1,"83":108,"84":109,"85":110,"86":111,"87":110,"88":112,"89":113,"90":114,"91":115,"92":116,"93":115,"94":117,"95":1,"96":1,"97":57,"98":118,"99":119,"100":120,"101":121,"102":122,"103":123,"104":1,"105":1},{"107":162,"108":163},{"110":165,"111":63},{"74":101,"113":1,"114":2,"115":166,"116":119,"117":167,"118":168},{"30":58,"120":171,"121":172,"122":1,"123":63,"124":57,"125":173},{"117":177,"127":177},{"129":1,"130":178,"131":57,"132":179,"133":1,"134":180,"135":1},{"137":194,"138":195},{},{"147":217},{"149":223,"150":57,"151":224,"152":225,"153":226},{"60":235,"151":234},{"158":264},{"160":1,"161":275,"162":5,"163":179},{"164":1,"165":109,"166":109,"167":287,"168":288,"169":289,"170":115},{"182":313,"183":1,"184":314},{"186":57,"187":57,"188":57,"189":1,"190":1,"191":1,"192":1,"193":322,"194":1,"195":323,"196":1,"197":324,"198":1,"199":325,"200":1,"201":5,"202":1,"203":1,"204":326,"205":1,"206":327},{"208":370,"209":371,"210":1,"211":1},{"213":375,"214":1,"215":376,"216":1},{"219":378,"220":379,"221":2},{"223":1,"224":179,"225":177,"226":387},{"228":388},{"230":392,"231":393},{"233":395,"234":1,"235":396},{"237":397,"238":177,"239":179,"240":398,"241":5,"242":109,"243":4,"244":399,"245":400,"246":119,"247":109,"248":119,"249":4,"250":401,"251":402,"252":119,"253":119,"254":403,"255":404,"256":405,"257":406},{"259":392,"260":418},{"262":420,"263":4,"264":115},{"266":421,"267":422,"268":109,"269":109,"270":423,"271":422,"272":109,"273":424,"274":403,"275":403,"276":425,"277":426},{"279":177,"280":1,"281":439,"282":440,"283":441},{"230":444,"285":1,"286":442,"287":443,"288":445},{"98":448,"290":109},{"292":450,"293":451,"294":452,"295":453,"296":315,"297":371},{"299":457,"300":458},{"258":459,"302":109,"303":1},{"305":468},{"307":1,"308":63,"309":472,"310":473},{"312":483,"313":179,"314":1,"315":1},{"319":57,"320":509,"321":405,"322":1,"323":510,"324":511,"325":512,"326":513,"327":514,"328":515,"329":516,"330":2,"331":2,"332":517,"333":518},{"335":553,"336":554,"337":555},{"339":563},{"30":569,"36":569,"125":173,"341":57,"342":445},{"344":6,"345":57,"346":574},{"348":575,"349":575},{"335":1016,"336":1017,"337":1018},{"251":676,"1134":673,"1135":674,"1136":227,"1137":227,"1138":675,"1139":2,"1140":1,"1141":677,"1142":678,"1143":679,"1144":680,"1145":6,"1146":681,"1147":1,"1148":1,"1149":682,"1150":678,"1151":678,"1152":57,"1153":1,"1154":13,"1155":13,"1156":227},{"1158":1},{"1198":57},{"1200":862,"1201":863,"1202":864},{"5":875,"1204":871,"1205":1,"1206":872,"1207":873,"1208":874},{"129":1,"130":177,"1210":899,"1211":900,"1212":901,"1213":716,"1214":771},{"264":115,"1218":179,"1219":931,"1220":932,"1221":5,"1222":933,"1223":2},{"1239":1041,"1240":1042},{"1184":1225,"1185":1226,"1186":1227,"1187":1228,"1188":1229,"1189":1230,"1190":1231,"1191":1232,"1192":816},{"1505":1136},{"30":177,"32":57},{"1212":1692,"1213":326,"1538":109,"1539":1158,"1540":1691,"1541":5},{"1213":101,"1214":100},{"129":1,"130":178,"131":57,"132":179},{"129":1,"130":177,"1210":2089,"1211":2090,"1212":2091,"1213":101,"1214":100},{"352":18,"353":19,"354":20,"355":20,"356":21,"357":22,"358":23,"359":18,"360":24,"361":24,"362":20},{"373":53,"374":54,"375":54,"376":54,"377":55},{"378":66,"379":66,"380":67},{"381":68},{"382":70,"383":71,"384":70,"385":72,"386":70,"387":70},{"385":82,"388":81,"389":81,"390":83,"391":84,"392":85,"393":86,"394":87,"395":88},{"396":124,"397":125,"398":126,"399":127,"400":128,"401":129,"402":130,"403":131,"404":130,"405":132,"406":133,"407":134,"408":130,"409":130,"410":135,"411":136,"412":130,"413":137,"414":138,"415":126,"416":136,"417":139,"418":140,"419":141,"420":142,"421":132,"422":143,"423":144,"424":145,"425":146,"426":141,"427":147},{"428":169,"429":130},{"378":174,"379":174,"430":175},{"431":182,"432":183,"433":184,"434":70,"435":70,"436":70},{"437":196,"438":197,"439":198,"440":199,"441":200,"442":201},{"382":228,"455":229,"456":230,"457":231,"458":232},{"459":130,"460":236,"461":237,"462":238,"463":239,"464":240},{"487":277,"488":278,"489":279,"490":278,"491":278,"492":280,"493":278,"494":278,"495":281,"496":279},{"489":291,"490":292,"491":292,"497":290,"498":293,"499":292,"500":292},{"505":316,"506":317,"507":318},{"397":329,"398":330,"399":332,"401":335,"402":340,"450":337,"508":328,"509":130,"510":331,"511":333,"512":334,"513":336,"514":338,"515":339,"516":341,"517":342,"518":343,"519":344,"520":345,"521":346,"522":340,"523":340,"524":347,"525":348,"526":348,"527":340},{"528":130,"529":130,"530":372},{"531":132,"532":132,"533":132,"534":132,"535":132,"536":132,"537":132,"538":132,"539":132,"540":132,"541":380,"542":380,"543":132,"544":132,"545":132,"546":132,"547":132,"548":132,"549":132,"550":132,"551":132,"552":132,"553":132,"554":132,"555":132,"556":381,"557":381,"558":132,"559":132,"560":132,"561":132,"562":132,"563":132,"564":132,"565":132,"566":382,"567":383,"568":384,"569":381,"570":132,"571":132,"572":132,"573":132,"574":385,"575":132,"576":386},{"577":394},{"578":407,"579":408,"580":409,"581":408,"582":410,"583":411,"584":412,"585":413,"586":414},{"587":419},{"588":427,"589":428,"590":429,"591":430,"592":431,"593":431,"594":432,"595":433,"596":434,"597":434,"598":435},{"599":130},{"600":449},{"601":454,"602":454,"603":454},{"529":462,"604":460,"605":461,"606":463,"607":410,"608":130,"609":410,"610":407,"611":408},{"612":469,"613":410,"614":410},{"615":474,"616":475,"617":130},{"511":484,"618":485,"619":486,"620":70,"621":70,"622":484,"623":487,"624":70,"625":488},{"626":493,"627":494,"628":495,"629":496},{"630":519,"631":520,"632":520,"633":521,"634":522,"635":523,"636":524,"637":524,"638":525,"639":525,"640":526,"641":525,"642":527,"643":528,"644":529,"645":530,"646":130},{"647":557,"648":558},{"511":564,"649":564,"650":565},{"651":570,"652":570,"653":571,"654":572,"655":572,"656":573,"657":573},{"647":1019,"648":1020},{"1250":683,"1251":684},{"511":867,"619":865,"1300":866,"1301":868},{"1302":876},{"437":905,"446":906,"633":903,"1303":902,"1304":904,"1305":906,"1306":907,"1307":906},{"630":519,"631":520,"632":520,"633":521,"634":522,"635":523,"636":524,"637":524,"638":525,"639":525,"640":526,"641":525,"642":527,"643":528},{"1333":1043,"1334":1044,"1335":130,"1336":1045},{"428":1149,"429":130},{"364":70,"443":1194,"444":70,"445":70,"446":70,"447":70,"448":210,"449":70,"450":211},{"1561":130,"1562":130,"1563":132,"1564":132,"1565":132},{"1559":1137,"1560":1138},{"1649":2126,"1650":183,"1651":183},{"1582":2038,"1585":2038,"1589":2039,"1590":1816,"1591":2040,"1592":2038,"1593":130},{"437":905,"446":906,"633":2093,"1303":2092,"1304":2094,"1305":906,"1306":907,"1307":906},{"364":70,"443":2150,"444":70,"445":70,"446":70,"447":70,"448":210,"449":70,"450":211},{"677":56,"678":56,"679":56},{"680":73,"681":74,"682":73,"683":75},{"288":93,"684":89,"685":90,"686":91,"687":92,"688":93,"689":93,"690":94,"691":93,"692":93,"693":93,"694":93,"695":93,"696":93,"697":93,"698":95,"699":96,"700":96,"701":93,"702":93,"703":93,"704":97},{"705":99},{"67":153,"94":159,"693":150,"706":148,"707":149,"708":151,"709":152,"710":27,"711":153,"712":153,"713":154,"714":27,"715":155,"716":156,"717":157,"718":158,"719":158,"720":160,"721":161},{"722":164},{"723":152,"724":170,"725":170},{"726":176,"727":27,"728":27},{"691":189,"729":185,"730":186,"731":187,"732":188,"733":190,"734":191,"735":192,"736":74,"737":193,"738":193,"739":74},{"740":202,"741":203,"742":204,"743":204,"744":205},{"745":212,"746":213,"747":213,"748":93,"749":214,"750":74,"751":74,"752":215,"753":74,"754":215,"755":215,"756":215,"757":215,"758":213,"759":216,"760":216},{"764":233},{"765":241,"766":28},{"784":74,"785":282,"786":74,"787":283,"788":284,"789":74,"790":74,"791":74,"792":285,"793":286,"794":285},{"668":294,"730":295,"764":296,"795":294},{"693":311,"707":311,"796":309,"797":310,"798":27,"799":312},{"800":319,"801":320},{"67":350,"711":352,"712":353,"802":349,"803":351,"804":354,"805":355,"806":356,"807":357,"808":358,"809":359,"810":360,"811":361,"812":362,"813":363,"814":364,"815":365,"816":365,"817":366,"818":367,"819":367,"820":367,"821":368},{"693":377,"740":377,"826":377,"827":377},{"828":389,"829":389,"830":390,"831":391},{"832":415,"833":415,"834":415,"835":415,"836":416,"837":417,"838":417,"839":417},{"840":436,"841":437,"842":438,"843":437,"844":436,"845":436,"846":438},{"847":446,"848":447,"849":415},{"850":455,"851":456,"852":93},{"688":466,"853":464,"854":465,"855":467},{"856":470,"857":471},{"688":478,"689":479,"858":476,"859":477,"860":480,"861":481,"862":482},{"872":49,"873":497},{"874":531,"875":532,"876":533,"877":534,"878":535,"879":536,"880":537,"881":538,"882":537,"883":537,"884":539,"885":535,"886":540,"887":541,"888":542,"889":543,"890":544,"891":545,"892":535,"893":546,"894":547,"895":547,"896":547,"897":548,"898":541,"899":549,"900":550,"901":551,"902":552},{"903":559,"904":560,"905":561,"906":562},{"907":566,"908":567,"909":568},{"903":1021,"904":1022,"905":1023,"906":1024},{"1339":27,"1340":685,"1341":27,"1342":686,"1343":687,"1344":688},{"802":870,"1400":869,"1401":870,"1402":870,"1403":870},{"1402":877},{"742":909,"753":910,"757":910,"1402":911,"1404":908,"1405":910,"1406":911,"1407":912,"1408":913,"1409":913},{"1410":934},{"1411":935,"1412":935,"1413":936},{"874":531,"875":532,"878":535,"879":536,"880":537,"881":538,"882":537,"883":537,"884":539,"885":535,"886":540,"887":541,"888":542,"889":543,"890":544,"891":545,"892":535,"893":546,"894":547,"895":547,"896":547,"897":548,"898":541,"899":549},{"1398":1047,"1434":1046,"1435":27,"1436":27,"1437":74,"1438":1047,"1439":1047,"1440":1048},{"1376":95,"1377":1242,"1378":1242,"1379":1243,"1380":1243,"1381":1244,"1382":836,"1383":1245,"1384":1246,"1385":1247,"1386":1245,"1387":1245,"1388":1248,"1389":1248,"1390":1249,"1391":1250,"1392":1251,"1393":1249,"1394":1249,"1395":844,"1396":844,"1397":844},{"1594":1139,"1595":1139},{"1596":1279},{"742":1699,"806":1698,"1608":95,"1609":1698,"1610":1700},{"745":212,"746":213,"747":213,"748":93,"749":1703,"750":74,"751":74,"752":1704,"753":74,"754":1704,"755":1704,"756":1704,"757":1704,"758":213,"759":216,"760":216},{"806":27,"1608":27,"1612":27,"1613":27,"1614":27,"1615":27},{"691":189,"729":185,"730":186,"731":187,"732":188,"734":191,"754":2128,"1404":2127},{"742":2096,"753":910,"757":910,"1402":2097,"1404":2095,"1405":910,"1406":2097,"1407":912,"1408":2098,"1409":2098},{"911":14,"912":15,"913":1,"914":16,"915":17,"916":1},{"917":13,"918":1},{"919":57,"920":57,"921":1,"922":1},{"923":57},{"691":57},{"924":57,"925":1,"926":1,"927":1},{"928":1},{"929":1,"930":1,"931":1,"932":1,"933":1,"934":1},{"921":1,"922":1,"935":57},{"936":1,"937":1,"938":181,"939":1,"940":1,"941":100},{"942":1,"943":1},{"944":57,"945":1,"946":1,"947":1,"948":208},{"949":227},{"950":57,"951":1},{"952":1},{"953":57,"954":57,"955":1,"956":1,"957":57,"958":57},{"959":57,"960":57,"961":1},{"962":57,"963":1,"964":1,"965":1,"966":276,"967":276,"968":57,"969":57,"970":1},{"971":1,"972":57},{"973":1,"974":1,"975":57,"976":1,"977":13,"978":1,"979":57,"980":57,"981":57,"982":1,"983":1,"984":13,"985":1,"986":1},{"987":315},{"938":181,"988":1,"989":1},{"96":1,"938":181},{"990":57},{"938":181,"991":57,"992":1},{"969":57,"993":57},{"994":1,"995":1},{"996":1,"997":1,"998":1,"999":1},{"938":181,"1000":57,"1001":1},{"1002":1,"1003":492},{"1004":1},{"1005":1,"1006":1,"1007":556,"1008":556},{"1441":1},{"1456":57,"1457":57,"1458":57,"1459":57,"1460":1,"1461":1,"1462":1,"1463":1,"1464":1,"1465":1},{"1466":13},{"1467":1,"1468":1,"1469":1},{"1470":1,"1471":57,"1472":57,"1473":57,"1474":57,"1475":57,"1476":1},{"1479":1,"1480":1},{"1616":1},{"1455":57},{"1477":993,"1478":13,"1617":392},{"1618":1},{"1623":100,"1624":1,"1625":1},{"936":1,"937":1,"938":181,"939":1,"1653":1,"1654":57,"1655":276},{"1017":580,"1018":581,"1019":582},{"1011":576},{"1013":577,"1014":578,"1015":579},{"1025":587,"1026":588,"1027":589,"1028":590,"1029":591,"1030":592,"1031":593,"1032":587,"1033":590,"1034":594},{"1025":597,"1036":595,"1037":596},{"1039":598},{"1041":599},{"1043":600,"1044":601,"1045":602,"1046":603,"1047":604,"1048":605,"1049":606,"1050":607,"1051":608,"1052":609,"1053":610,"1054":611,"1055":612,"1056":613,"1057":614,"1058":615,"1059":600,"1060":616,"1061":617,"1062":618,"1063":619,"1064":620,"1065":621,"1066":606,"1067":622,"1068":623,"1069":582,"1070":624,"1071":606,"1072":625,"1073":626,"1074":606,"1075":627,"1076":606},{"1078":628,"1079":629,"1080":630,"1081":631,"1082":632,"1083":633,"1084":634},{"1086":635,"1087":636,"1088":637,"1089":638,"1090":639},{"1092":640,"1093":640},{"1083":643,"1095":641,"1096":642,"1097":644},{"1083":647,"1096":648,"1099":645,"1100":644,"1101":646,"1102":646},{"1104":600},{"1106":649,"1107":650},{"1109":651},{"1111":652,"1112":653,"1113":654,"1114":655},{"1119":658,"1120":659,"1121":660,"1122":661},{"1127":664},{"1129":665,"1130":666,"1131":667},{"1501":1123},{"1503":1125},{"1481":1098},{"1104":600,"1626":644}],["Account","ExtrinsicCount","InherentsApplied","BlockWeight","AllExtrinsicsLen","BlockHash","ExtrinsicData","Number","ParentHash","Digest","Events","EventCount","EventTopics","LastRuntimeUpgrade","UpgradedToU32RefCount","UpgradedToTripleRefCount","ExecutionPhase","AuthorizedUpgrade","ExtrinsicWeightReclaimed","System","IncompleteSince","Agenda","Retries","Lookup","Scheduler","StatusFor","RequestStatusFor","PreimageFor","Preimage","EpochIndex","Authorities","GenesisSlot","CurrentSlot","Randomness","PendingEpochConfigChange","NextRandomness","NextAuthorities","SegmentIndex","UnderConstruction","Initialized","AuthorVrfRandomness","EpochStart","Lateness","EpochConfig","NextEpochConfig","SkippedEpochs","Babe","Now","DidUpdate","Timestamp","Accounts","Indices","TotalIssuance","InactiveIssuance","Locks","Reserves","Holds","Freezes","Balances","NextFeeMultiplier","StorageVersion","TransactionPayment","Author","Authorship","ValidatorCount","MinimumValidatorCount","Invulnerables","Bonded","MinNominatorBond","MinValidatorBond","MinimumActiveStake","MinCommission","Ledger","Payee","Validators","CounterForValidators","MaxValidatorsCount","Nominators","CounterForNominators","VirtualStakers","CounterForVirtualStakers","MaxNominatorsCount","CurrentEra","ActiveEra","ErasStartSessionIndex","ErasStakers","ErasStakersOverview","ErasStakersClipped","ErasStakersPaged","ClaimedRewards","ErasValidatorPrefs","ErasValidatorReward","ErasRewardPoints","ErasTotalStake","ForceEra","MaxStakedRewards","SlashRewardFraction","CanceledSlashPayout","UnappliedSlashes","BondedEras","ValidatorSlashInEra","NominatorSlashInEra","SlashingSpans","SpanSlash","CurrentPlannedSession","ChillThreshold","Staking","Reports","ConcurrentReportsIndex","Offences","HistoricalSessions","StoredRange","Historical","CurrentIndex","QueuedChanged","QueuedKeys","DisabledValidators","NextKeys","KeyOwner","Session","State","PendingChange","NextForced","Stalled","CurrentSetId","SetIdSession","Grandpa","Keys","AuthorityDiscovery","ProposalCount","Proposals","Deactivated","Approvals","SpendCount","Spends","LastSpendPeriod","Treasury","VotingFor","ClassLocksFor","ConvictionVoting","ReferendumCount","ReferendumInfoFor","TrackQueue","DecidingCount","MetadataOf","Referenda","Origins","WhitelistedCall","Whitelist","Claims","Total","Vesting","Signing","Preclaims","Utility","Proxies","Announcements","Proxy","Multisigs","Multisig","BountyCount","Bounties","BountyDescriptions","BountyApprovals","ChildBountyCount","ParentChildBounties","ParentTotalChildBounties","ChildBounties","ChildBountyDescriptionsV1","V0ToV1ChildBountyIds","ChildrenCuratorFees","Round","CurrentPhase","QueuedSolution","Snapshot","DesiredTargets","SnapshotMetadata","SignedSubmissionNextIndex","SignedSubmissionIndices","SignedSubmissionsMap","MinimumUntrustedScore","ElectionProviderMultiPhase","ListNodes","CounterForListNodes","ListBags","VoterList","TotalValueLocked","MinJoinBond","MinCreateBond","MaxPools","MaxPoolMembers","MaxPoolMembersPerPool","GlobalMaxCommission","PoolMembers","CounterForPoolMembers","BondedPools","CounterForBondedPools","RewardPools","CounterForRewardPools","SubPoolsStorage","CounterForSubPoolsStorage","Metadata","CounterForMetadata","LastPoolId","ReversePoolIdLookup","CounterForReversePoolIdLookup","ClaimPermissions","NominationPools","Head","Queue","CounterForQueue","ErasToCheckPerBlock","FastUnstake","Delegators","CounterForDelegators","Agents","CounterForAgents","DelegatedStaking","ParachainsOrigin","ActiveConfig","PendingConfigs","BypassConsistencyCheck","Configuration","CurrentSessionIndex","ActiveValidatorIndices","ActiveValidatorKeys","AllowedRelayParents","ParasShared","V1","ParaInclusion","Included","OnChainVotes","ParaInherent","ValidatorGroups","SessionStartBlock","ClaimQueue","ParaScheduler","PvfActiveVoteMap","PvfActiveVoteList","Parachains","ParaLifecycles","Heads","MostRecentContext","CurrentCodeHash","PastCodeHash","PastCodeMeta","PastCodePruning","FutureCodeUpgrades","FutureCodeUpgradesAt","FutureCodeHash","UpgradeGoAheadSignal","UpgradeRestrictionSignal","UpgradeCooldowns","UpcomingUpgrades","ActionsQueue","UpcomingParasGenesis","CodeByHashRefs","CodeByHash","Paras","HasInitialized","BufferedSessionChanges","Initializer","DownwardMessageQueues","DownwardMessageQueueHeads","DeliveryFeeFactor","Dmp","HrmpOpenChannelRequests","HrmpOpenChannelRequestsList","HrmpOpenChannelRequestCount","HrmpAcceptedChannelRequestCount","HrmpCloseChannelRequests","HrmpCloseChannelRequestsList","HrmpWatermarks","HrmpChannels","HrmpIngressChannelsIndex","HrmpEgressChannelsIndex","HrmpChannelContents","HrmpChannelDigests","Hrmp","AssignmentKeysUnsafe","EarliestStoredSession","Sessions","AccountKeys","SessionExecutorParams","ParaSessionInfo","LastPrunedSession","Disputes","BackersOnDisputes","Frozen","ParasDisputes","ValidatorSetCounts","ParasSlashing","ParaIdAffinity","QueueStatus","FreeEntries","AffinityEntries","Revenue","Credits","OnDemand","CoreSchedules","CoreDescriptors","CoretimeAssignmentProvider","PendingSwap","NextFreeParaId","Registrar","Leases","Slots","AuctionCounter","AuctionInfo","ReservedAmounts","Winning","Auctions","Funds","NewRaise","EndingsCount","NextFundIndex","Crowdloan","Coretime","StateTrieMigration","QueryCounter","Queries","AssetTraps","SafeXcmVersion","SupportedVersion","VersionNotifiers","VersionNotifyTargets","VersionDiscoveryQueue","CurrentMigration","RemoteLockedFungibles","LockedFungibles","XcmExecutionSuspended","ShouldRecordXcm","RecordedXcm","AuthorizedAliases","XcmPallet","BookStateFor","ServiceHead","Pages","MessageQueue","ConversionRateToNative","AssetRate","ValidatorSetId","GenesisBlock","Beefy","RootHash","NumberOfLeaves","Nodes","Mmr","BeefyAuthorities","BeefyNextAuthorities","BeefyMmrLeaf","storage","remark","set_heap_pages","set_code","set_code_without_checks","set_storage","kill_storage","kill_prefix","remark_with_event","authorize_upgrade","authorize_upgrade_without_checks","apply_authorized_upgrade","schedule","cancel","schedule_named","cancel_named","schedule_after","schedule_named_after","set_retry","set_retry_named","cancel_retry","cancel_retry_named","note_preimage","unnote_preimage","request_preimage","unrequest_preimage","ensure_updated","report_equivocation","report_equivocation_unsigned","plan_config_change","set","claim","transfer","free","force_transfer","freeze","poke_deposit","transfer_allow_death","transfer_keep_alive","transfer_all","force_unreserve","upgrade_accounts","force_set_balance","force_adjust_total_issuance","burn","bond","bond_extra","unbond","withdraw_unbonded","validate","nominate","chill","set_payee","set_controller","set_validator_count","increase_validator_count","scale_validator_count","force_no_eras","force_new_era","set_invulnerables","force_unstake","force_new_era_always","cancel_deferred_slash","payout_stakers","rebond","reap_stash","kick","set_staking_configs","chill_other","force_apply_min_commission","set_min_commission","payout_stakers_by_page","update_payee","deprecate_controller_batch","restore_ledger","migrate_currency","manual_slash","set_keys","purge_keys","note_stalled","spend_local","remove_approval","spend","payout","check_status","void_spend","vote","delegate","undelegate","unlock","remove_vote","remove_other_vote","submit","place_decision_deposit","refund_decision_deposit","kill","nudge_referendum","one_fewer_deciding","refund_submission_deposit","set_metadata","whitelist_call","remove_whitelisted_call","dispatch_whitelisted_call","dispatch_whitelisted_call_with_preimage","mint_claim","claim_attest","attest","move_claim","vest","vest_other","vested_transfer","force_vested_transfer","merge_schedules","force_remove_vesting_schedule","batch","as_derivative","batch_all","dispatch_as","force_batch","with_weight","if_else","dispatch_as_fallible","proxy","add_proxy","remove_proxy","remove_proxies","create_pure","kill_pure","announce","remove_announcement","reject_announcement","proxy_announced","as_multi_threshold_1","as_multi","approve_as_multi","cancel_as_multi","propose_bounty","approve_bounty","propose_curator","unassign_curator","accept_curator","award_bounty","claim_bounty","close_bounty","extend_bounty_expiry","approve_bounty_with_curator","add_child_bounty","award_child_bounty","claim_child_bounty","close_child_bounty","submit_unsigned","set_minimum_untrusted_score","set_emergency_election_result","governance_fallback","rebag","put_in_front_of","put_in_front_of_other","join","claim_payout","pool_withdraw_unbonded","create","create_with_pool_id","set_state","set_configs","update_roles","bond_extra_other","set_claim_permission","claim_payout_other","set_commission","set_commission_max","set_commission_change_rate","claim_commission","adjust_pool_deposit","set_commission_claim_permission","apply_slash","migrate_delegation","migrate_pool_to_delegate_stake","register_fast_unstake","deregister","control","set_validation_upgrade_cooldown","set_validation_upgrade_delay","set_code_retention_period","set_max_code_size","set_max_pov_size","set_max_head_data_size","set_coretime_cores","set_group_rotation_frequency","set_paras_availability_period","set_scheduling_lookahead","set_max_validators_per_core","set_max_validators","set_dispute_period","set_dispute_post_conclusion_acceptance_period","set_no_show_slots","set_n_delay_tranches","set_zeroth_delay_tranche_width","set_needed_approvals","set_relay_vrf_modulo_samples","set_max_upward_queue_count","set_max_upward_queue_size","set_max_downward_message_size","set_max_upward_message_size","set_max_upward_message_num_per_candidate","set_hrmp_open_request_ttl","set_hrmp_sender_deposit","set_hrmp_recipient_deposit","set_hrmp_channel_max_capacity","set_hrmp_channel_max_total_size","set_hrmp_max_parachain_inbound_channels","set_hrmp_channel_max_message_size","set_hrmp_max_parachain_outbound_channels","set_hrmp_max_message_num_per_candidate","set_pvf_voting_ttl","set_minimum_validation_upgrade_delay","set_bypass_consistency_check","set_async_backing_params","set_executor_params","set_on_demand_base_fee","set_on_demand_fee_variability","set_on_demand_queue_max_size","set_on_demand_target_queue_utilization","set_minimum_backing_votes","set_node_feature","set_approval_voting_params","set_scheduler_params","enter","force_set_current_code","force_set_current_head","force_schedule_code_upgrade","force_note_new_head","force_queue_action","add_trusted_validation_code","poke_unused_validation_code","include_pvf_check_statement","force_set_most_recent_context","force_approve","hrmp_init_open_channel","hrmp_accept_open_channel","hrmp_close_channel","force_clean_hrmp","force_process_hrmp_open","force_process_hrmp_close","hrmp_cancel_open_request","force_open_hrmp_channel","establish_system_channel","poke_channel_deposits","establish_channel_with_system","force_unfreeze","report_dispute_lost_unsigned","place_order_allow_death","place_order_keep_alive","place_order_with_credits","register","force_register","swap","remove_lock","reserve","add_lock","schedule_code_upgrade","set_current_head","force_lease","clear_all_leases","trigger_onboard","new_auction","bid","cancel_auction","contribute","withdraw","refund","dissolve","edit","add_memo","poke","contribute_all","request_core_count","request_revenue_at","credit_account","assign_core","send","teleport_assets","reserve_transfer_assets","execute","force_xcm_version","force_default_xcm_version","force_subscribe_version_notify","force_unsubscribe_version_notify","limited_reserve_transfer_assets","limited_teleport_assets","force_suspension","transfer_assets","claim_assets","transfer_assets_using_type_and_then","add_authorized_alias","remove_authorized_alias","remove_all_authorized_aliases","reap_page","execute_overweight","update","remove","report_double_voting","report_double_voting_unsigned","set_new_genesis","report_fork_voting","report_fork_voting_unsigned","report_future_block_voting","report_future_block_voting_unsigned","tx","ExtrinsicSuccess","ExtrinsicFailed","CodeUpdated","NewAccount","KilledAccount","Remarked","UpgradeAuthorized","RejectedInvalidAuthorizedUpgrade","Scheduled","Canceled","Dispatched","RetrySet","RetryCancelled","CallUnavailable","PeriodicFailed","RetryFailed","PermanentlyOverweight","AgendaIncomplete","Noted","Requested","Cleared","IndexAssigned","IndexFreed","IndexFrozen","DepositPoked","Endowed","DustLost","Transfer","BalanceSet","Reserved","Unreserved","ReserveRepatriated","Deposit","Withdraw","Slashed","Minted","Burned","Suspended","Restored","Upgraded","Issued","Rescinded","Locked","Unlocked","Thawed","TotalIssuanceForced","TransactionFeePaid","EraPaid","Rewarded","SlashReported","OldSlashingReportDiscarded","StakersElected","Unbonded","Withdrawn","Kicked","StakingElectionFailed","Chilled","PayoutStarted","ValidatorPrefsSet","SnapshotVotersSizeExceeded","SnapshotTargetsSizeExceeded","ControllerBatchDeprecated","CurrencyMigrated","Offence","NewSession","ValidatorDisabled","ValidatorReenabled","NewAuthorities","Paused","Resumed","Spending","Awarded","Burnt","Rollover","SpendApproved","UpdatedInactive","AssetSpendApproved","AssetSpendVoided","Paid","PaymentFailed","SpendProcessed","Delegated","Undelegated","Voted","VoteRemoved","VoteUnlocked","Submitted","DecisionDepositPlaced","DecisionDepositRefunded","DepositSlashed","DecisionStarted","ConfirmStarted","ConfirmAborted","Confirmed","Approved","Rejected","TimedOut","Cancelled","Killed","SubmissionDepositRefunded","MetadataSet","MetadataCleared","CallWhitelisted","WhitelistedCallRemoved","WhitelistedCallDispatched","Claimed","VestingUpdated","VestingCompleted","BatchInterrupted","BatchCompleted","BatchCompletedWithErrors","ItemCompleted","ItemFailed","DispatchedAs","IfElseMainSuccess","IfElseFallbackCalled","ProxyExecuted","PureCreated","Announced","ProxyAdded","ProxyRemoved","NewMultisig","MultisigApproval","MultisigExecuted","MultisigCancelled","BountyProposed","BountyRejected","BountyBecameActive","BountyAwarded","BountyClaimed","BountyCanceled","BountyExtended","BountyApproved","CuratorProposed","CuratorUnassigned","CuratorAccepted","Added","SolutionStored","ElectionFinalized","ElectionFailed","PhaseTransitioned","Rebagged","ScoreUpdated","Created","PaidOut","Destroyed","StateChanged","MemberRemoved","RolesUpdated","PoolSlashed","UnbondingPoolSlashed","PoolCommissionUpdated","PoolMaxCommissionUpdated","PoolCommissionChangeRateUpdated","PoolCommissionClaimPermissionUpdated","PoolCommissionClaimed","MinBalanceDeficitAdjusted","MinBalanceExcessAdjusted","MemberClaimPermissionUpdated","MetadataUpdated","PoolNominationMade","PoolNominatorChilled","GlobalParamsUpdated","Unstaked","BatchChecked","BatchFinished","InternalError","Released","MigratedDelegation","CandidateBacked","CandidateIncluded","CandidateTimedOut","UpwardMessagesReceived","CurrentCodeUpdated","CurrentHeadUpdated","CodeUpgradeScheduled","NewHeadNoted","ActionQueued","PvfCheckStarted","PvfCheckAccepted","PvfCheckRejected","OpenChannelRequested","OpenChannelCanceled","OpenChannelAccepted","ChannelClosed","HrmpChannelForceOpened","HrmpSystemChannelOpened","OpenChannelDepositsUpdated","DisputeInitiated","DisputeConcluded","Revert","OnDemandOrderPlaced","SpotPriceSet","AccountCredited","Registered","Deregistered","Swapped","NewLeasePeriod","Leased","AuctionStarted","AuctionClosed","ReserveConfiscated","BidAccepted","WinningOffset","Contributed","Withdrew","PartiallyRefunded","AllRefunded","Dissolved","HandleBidResult","Edited","MemoUpdated","AddedToNewRaise","RevenueInfoRequested","CoreAssigned","Attempted","Sent","SendFailed","ProcessXcmError","UnexpectedResponse","ResponseReady","Notified","NotifyOverweight","NotifyDispatchError","NotifyDecodeFailed","InvalidResponder","InvalidResponderVersion","ResponseTaken","AssetsTrapped","VersionChangeNotified","SupportedVersionChanged","NotifyTargetSendFail","NotifyTargetMigrationFail","InvalidQuerierVersion","InvalidQuerier","VersionNotifyStarted","VersionNotifyRequested","VersionNotifyUnrequested","FeesPaid","AssetsClaimed","VersionMigrationFinished","AliasAuthorized","AliasAuthorizationRemoved","AliasesAuthorizationsRemoved","ProcessingFailed","Processed","OverweightEnqueued","PageReaped","AssetRateCreated","AssetRateRemoved","AssetRateUpdated","events","BlockWeights","BlockLength","BlockHashCount","DbWeight","Version","SS58Prefix","MaximumWeight","MaxScheduledPerBlock","EpochDuration","ExpectedBlockTime","MaxAuthorities","MaxNominators","MinimumPeriod","ExistentialDeposit","MaxLocks","MaxReserves","MaxFreezes","OperationalFeeMultiplier","HistoryDepth","SessionsPerEra","BondingDuration","SlashDeferDuration","MaxExposurePageSize","MaxUnlockingChunks","MaxSetIdSessionEntries","SpendPeriod","Burn","PalletId","MaxApprovals","PayoutPeriod","pot_account","MaxVotes","VoteLockingPeriod","SubmissionDeposit","MaxQueued","UndecidingTimeout","AlarmInterval","Tracks","Prefix","MinVestedTransfer","MaxVestingSchedules","batched_calls_limit","ProxyDepositBase","ProxyDepositFactor","MaxProxies","MaxPending","AnnouncementDepositBase","AnnouncementDepositFactor","DepositBase","DepositFactor","MaxSignatories","BountyDepositBase","BountyDepositPayoutDelay","BountyUpdatePeriod","CuratorDepositMultiplier","CuratorDepositMax","CuratorDepositMin","BountyValueMinimum","DataDepositPerByte","MaximumReasonLength","MaxActiveChildBountyCount","ChildBountyValueMinimum","BetterSignedThreshold","OffchainRepeat","MinerTxPriority","SignedMaxSubmissions","SignedMaxWeight","SignedMaxRefunds","SignedRewardBase","SignedDepositByte","SignedDepositWeight","MaxWinners","MinerMaxLength","MinerMaxWeight","MinerMaxVotesPerVoter","MinerMaxWinners","BagThresholds","MaxPointsToBalance","MaxUnbonding","UnsignedPriority","TrafficDefaultValue","MaxHistoricalRevenue","ParaDeposit","LeasePeriod","LeaseOffset","EndingPeriod","SampleLength","SlotRangeCount","LeasePeriodsPerSlot","MinContribution","RemoveKeysLimit","BrokerId","BrokerPotLocation","AdvertisedXcmVersion","HeapSize","MaxStale","ServiceWeight","IdleMaxServiceWeight","constants","viewFns","experimental_inflation_prediction_info","Inflation","version","execute_block","initialize_block","Core","metadata","metadata_at_version","metadata_versions","apply_extrinsic","finalize_block","inherent_extrinsics","check_inherents","BlockBuilder","pending_rewards","points_to_balance","balance_to_points","pool_pending_slash","member_pending_slash","pool_needs_delegate_migration","member_needs_delegate_migration","member_total_balance","pool_balance","pool_accounts","NominationPoolsApi","nominations_quota","eras_stakers_page_count","StakingApi","validate_transaction","TaggedTransactionQueue","offchain_worker","OffchainWorkerApi","validators","validator_groups","availability_cores","persisted_validation_data","assumed_validation_data","check_validation_outputs","session_index_for_child","validation_code","candidate_pending_availability","candidate_events","dmq_contents","inbound_hrmp_channels_contents","validation_code_by_hash","on_chain_votes","session_info","submit_pvf_check_statement","pvfs_require_precheck","validation_code_hash","disputes","session_executor_params","unapplied_slashes","key_ownership_proof","submit_report_dispute_lost","minimum_backing_votes","para_backing_state","async_backing_params","disabled_validators","node_features","approval_voting_params","claim_queue","candidates_pending_availability","validation_code_bomb_limit","backing_constraints","scheduling_lookahead","ParachainHost","beefy_genesis","validator_set","submit_report_double_voting_unsigned_extrinsic","submit_report_fork_voting_unsigned_extrinsic","submit_report_future_block_voting_unsigned_extrinsic","generate_key_ownership_proof","generate_ancestry_proof","BeefyApi","mmr_root","mmr_leaf_count","generate_proof","verify_proof","verify_proof_stateless","MmrApi","authority_set_proof","next_authority_set_proof","BeefyMmrApi","grandpa_authorities","submit_report_equivocation_unsigned_extrinsic","current_set_id","GrandpaApi","configuration","current_epoch_start","current_epoch","next_epoch","BabeApi","authorities","AuthorityDiscoveryApi","generate_session_keys","decode_session_keys","SessionKeys","account_nonce","AccountNonceApi","query_info","query_fee_details","query_weight_to_fee","query_length_to_fee","TransactionPaymentApi","query_call_info","query_call_fee_details","TransactionPaymentCallApi","query_acceptable_payment_assets","query_xcm_weight","query_weight_to_asset_fee","query_delivery_fees","XcmPaymentApi","dry_run_call","dry_run_xcm","DryRunApi","convert_location","LocationToAccountApi","build_state","get_preset","preset_names","GenesisBuilder","apis","UnincludedSegment","AggregatedUnincludedSegment","PendingValidationCode","NewValidationCode","ValidationData","DidSetValidationCode","LastRelayChainBlockNumber","UpgradeGoAhead","RelayStateProof","RelevantMessagingState","HostConfiguration","LastDmqMqcHead","LastHrmpMqcHeads","ProcessedDownwardMessages","HrmpWatermark","HrmpOutboundMessages","UpwardMessages","PendingUpwardMessages","UpwardDeliveryFeeFactor","AnnouncedHrmpMessagesPerCandidate","ReservedXcmpWeightOverride","ReservedDmpWeightOverride","CustomValidationHeadData","ParachainSystem","ParachainId","ParachainInfo","RootTesting","CollatorCommission","TotalSelected","DelegatorState","CandidateInfo","DelegationScheduledRequests","TopDelegations","BottomDelegations","SelectedCandidates","CandidatePool","AtStake","DelayedPayouts","InflationConfig","Points","AwardedPts","ParachainStaking","InherentIncluded","AuthorInherent","AuthorFilter","AuthorMapping","MoonbeamOrbiters","SlotInfo","AsyncBacking","MaintenanceMode","IdentityOf","UsernameOf","SuperOf","SubsOf","Registrars","AuthorityOf","UsernameInfoOf","PendingUsernames","UnbindingUsernames","Identity","Migrations","ProxyGenesisCompanion","MoonbeamLazyMigrations","Parameters","ChainId","EthereumChainId","AccountCodes","AccountCodesMetadata","AccountStorages","EVM","Pending","CounterForPending","CurrentBlock","CurrentReceipts","CurrentTransactionStatuses","Ethereum","ProposalOf","CostOf","Voting","Members","Prime","TreasuryCouncilCollective","OpenTechCommitteeCollective","CrowdloanRewards","InboundXcmpSuspended","OutboundXcmpStatus","OutboundXcmpMessages","SignalMessages","QueueConfig","QueueSuspended","XcmpQueue","CumulusXcm","PolkadotXcm","Asset","NextAssetId","Assets","AssetManager","XcmTransactor","Nonce","EthereumXcm","Erc20XcmBridge","EvmForeignAssets","SupportedAssets","XcmWeightTrader","EmergencyParaXcm","Cursor","Historic","MultiBlockMigrations","RelayStorageRoots","PrecompileBenchmarks","PalletOwner","PalletOperatingMode","BridgeKusamaGrandpa","BridgeKusamaParachains","BridgeKusamaMessages","BridgeXcmOverMoonriver","set_validation_data","sudo_send_upward_message","set_staking_expectations","set_inflation","set_parachain_bond_account","set_parachain_bond_reserve_percent","set_total_selected","set_collator_commission","set_blocks_per_round","join_candidates","schedule_leave_candidates","execute_leave_candidates","cancel_leave_candidates","go_offline","go_online","candidate_bond_more","schedule_candidate_bond_less","execute_candidate_bond_less","cancel_candidate_bond_less","schedule_revoke_delegation","delegator_bond_more","schedule_delegator_bond_less","execute_delegation_request","cancel_delegation_request","hotfix_remove_delegation_requests_exited_candidates","add_registrar","set_identity","set_subs","clear_identity","request_judgement","cancel_request","set_fee","set_account_id","set_fields","provide_judgement","kill_identity","add_sub","rename_sub","remove_sub","quit_sub","add_username_authority","remove_username_authority","set_username_for","accept_username","remove_expired_approval","set_primary_username","unbind_username","remove_username","kill_username","set_parameter","call","create2","transact","set_members","propose","disapprove_proposal","close","release_proposal_cost","force_create","start_destroy","destroy_accounts","destroy_approvals","finish_destroy","mint","thaw","freeze_asset","thaw_asset","transfer_ownership","set_team","clear_metadata","force_set_metadata","force_clear_metadata","force_asset_status","approve_transfer","cancel_approval","force_cancel_approval","transfer_approved","touch","set_min_balance","touch_other","refund_other","block","remove_asset","force_set_cursor","force_set_active_cursor","force_onboard_mbms","clear_historic","set_owner","set_operating_mode","ValidationFunctionStored","ValidationFunctionApplied","ValidationFunctionDiscarded","DownwardMessagesReceived","DownwardMessagesProcessed","UpwardMessageSent","NewRound","JoinedCollatorCandidates","CollatorChosen","CandidateBondLessRequested","CandidateBondedMore","CandidateBondedLess","CandidateWentOffline","CandidateBackOnline","CandidateScheduledExit","CancelledCandidateExit","CancelledCandidateBondLess","CandidateLeft","DelegationDecreaseScheduled","DelegationIncreased","DelegationDecreased","DelegatorExitScheduled","DelegationRevocationScheduled","DelegatorLeft","DelegationRevoked","DelegationKicked","DelegatorExitCancelled","CancelledDelegationRequest","Delegation","DelegatorLeftCandidate","InflationSet","StakeExpectationsSet","TotalSelectedSet","CollatorCommissionSet","BlocksPerRoundSet","FailedToSuspendIdleXcmExecution","FailedToResumeIdleXcmExecution","IdentitySet","IdentityCleared","IdentityKilled","JudgementRequested","JudgementUnrequested","JudgementGiven","RegistrarAdded","SubIdentityAdded","SubIdentitiesSet","SubIdentityRenamed","SubIdentityRemoved","SubIdentityRevoked","AuthorityAdded","AuthorityRemoved","UsernameSet","UsernameQueued","PreapprovalExpired","PrimaryUsernameSet","DanglingUsernameRemoved","UsernameUnbound","UsernameRemoved","UsernameKilled","MigrationCompleted","Updated","Log","CreatedFailed","Executed","ExecutedFailed","Proposed","Disapproved","MemberExecuted","Closed","ProposalCostBurned","ProposalCostReleased","XcmpMessageSent","InvalidFormat","UnsupportedVersion","ExecutedDownward","Transferred","TeamChanged","OwnerChanged","AssetFrozen","AssetThawed","AccountsDestroyed","ApprovalsDestroyed","DestructionStarted","ForceCreated","ApprovedTransfer","ApprovalCancelled","TransferredApproved","AssetStatusChanged","AssetMinBalanceChanged","Touched","Blocked","Deposited","UnitsPerSecondChanged","ForeignAssetXcmLocationChanged","SupportedAssetRemoved","UpgradeStarted","UpgradeCompleted","UpgradeFailed","MigrationSkipped","MigrationAdvanced","MigrationFailed","HistoricCleared","SelfParaId","MinBlocksPerRound","LeaveCandidatesDelay","CandidateBondLessDelay","LeaveDelegatorsDelay","RevokeDelegationDelay","DelegationBondLessDelay","RewardPaymentDelay","MinSelectedCandidates","MaxTopDelegationsPerCandidate","MaxBottomDelegationsPerCandidate","MaxDelegationsPerDelegator","MinCandidateStk","MinDelegation","SlotDuration","BasicDeposit","ByteDeposit","UsernameDeposit","SubAccountDeposit","MaxSubAccounts","MaxRegistrars","PendingUsernameExpiration","UsernameGracePeriod","MaxSuffixLength","MaxUsernameLength","MaxProposalWeight","MaxInboundSuspended","MaxActiveOutboundChannels","MaxPageSize","RemoveItemsLimit","AssetDeposit","AssetAccountDeposit","MetadataDepositBase","MetadataDepositPerByte","ApprovalDeposit","StringLimit","SelfLocation","BaseXcmWeight","CursorMaxLen","IdentifierMaxLen","can_build_upon","best_finalized","free_headers_interval","message_details","extrinsic_filter","chain_id","account_basic","gas_price","account_code_at","author","storage_at","current_block","current_receipts","current_transaction_statuses","current_all","elasticity","gas_limit_multiplier_support","pending_block","initialize_pending_block","EthereumRuntimeRPCApi","convert_transaction","ConvertTransactionRuntimeApi","collect_collation_info","CollectCollationInfo","PausedCalls","TxPause","Aura","AuraExt","EVMChainId","DynamicFee","EVMAccounts","XTokens","Tokens","Currencies","UnknownTokens","OrmlXcm","ZenlinkProtocol","ChallengePeriod","Ismp","IsmpParachain","Hyperbridge","TokenGateway","FlexibleFee","Salp","AssetRegistry","VtokenMinting","Slp","XcmInterface","ExchangeRate","TokenConversion","Farming","SystemStaking","FeeShare","CrossInOut","Supply","BbBNC","Slpx","MemberCount","IdToIndex","IndexToId","VotingCleanup","FellowshipCollective","FellowshipReferenda","StableAsset","StablePool","VtokenVoting","LendMarket","Prices","RawValues","Values","HasDispatched","Oracle","OracleMembership","LeverageStaking","ChannelCommission","CloudsConvert","BuyBack","SlpV2","pause","unpause","suspend_xcm_execution","resume_xcm_execution","update_suspend_threshold","update_drop_threshold","update_resume_threshold","transfer_multiasset","transfer_with_fee","transfer_multiasset_with_fee","transfer_multicurrencies","transfer_multiassets","add_liquidity","redeem","transfer_back","transfer_to","update_ongoing_time_unit","add_delegator","remove_delegator","add_validator","remove_validator","charge","refresh","add_member","promote_member","demote_member","remove_member","cleanup_poll","exchange_member","feed_values","swap_member","reset_members","change_key","set_prime","clear_prime","CallPaused","CallUnpaused","TransferredAssets","LiquidityAdded","TransferTo","Redeemed","AssetRegistered","Payout","TransferBack","DelegatorAdded","TimeUnitUpdated","Charged","ConfigSet","RewardAdded","MemberAdded","RankChanged","MemberExchanged","NewFeedData","MembersSwapped","MembersReset","KeyChanged","Dummy","MaxNameLen","RateLimiterId","MaxLengthLimit","TreasuryAccount","RelayChainToken","BuyBackAccount","QueryTimeout","RootOperatorAccountId","MaxHasDispatchedSize","MaxFeedValues","slot_duration","AuraApi","AuraUnincludedSegmentApi","DappStaking","PriceAggregator","Candidates","CollatorSelection","XcAssetConfig","DynamicEvmBaseFee","Contracts","Sudo","CouncilMembership","TechnicalCommitteeMembership","CommunityCouncilMembership","Council","TechnicalCommittee","CommunityCouncil","Democracy","CommunityTreasury","CollectiveProxy","SafeMode","upload_code","instantiate","propose_spend","reject_proposal","approve_proposal","VotingPeriod","ProposalBond","ProposalBondMinimum","ProposalBondMaximum","Society","Recovery","Nis","NisCounterpartBalances","OnDemandAssignmentProvider"]]`);
    replaceTokens = (obj) => Object.fromEntries(
      Object.entries(obj).map(([key, value]) => {
        const unwrappedValue = typeof value === "object" ? replaceTokens(value) : value;
        const numericKey = Number(key);
        if (Number.isNaN(numericKey)) {
          return [key, unwrappedValue];
        }
        return [tokens[numericKey], unwrappedValue];
      })
    );
    tokenizedCommonTrees = commonTrees.map(replaceTokens);
    unwrap = (obj, depth) => depth === 0 ? obj : Object.fromEntries(
      Object.entries(obj).map(([key, value]) => [
        key,
        unwrap(
          typeof value === "object" ? value : tokenizedCommonTrees[value],
          depth - 1
        )
      ])
    );
    getChainDescriptors = (key) => unwrap(replaceTokens(minified[key]), 2);
    Polkadot = getChainDescriptors("polkadot");
    Moonbeam = getChainDescriptors("moonbeam");
    Bifrost = getChainDescriptors("bifrost");
    Astar = getChainDescriptors("astar");
    Kusama = getChainDescriptors("kusama");
  }
});

// .papi/descriptors/src/metadataTypes.ts
var metadataTypes_exports = {};
__export(metadataTypes_exports, {
  default: () => metadataTypes_default
});
var content, metadataTypes_default;
var init_metadataTypes = __esm({
  ".papi/descriptors/src/metadataTypes.ts"() {
    "use strict";
    content = "";
    metadataTypes_default = content;
  }
});

// .papi/descriptors/src/polkadot_metadata.ts
var polkadot_metadata_exports = {};
__export(polkadot_metadata_exports, {
  default: () => polkadot_metadata_default
});
var binMeta, polkadot_metadata_default;
var init_polkadot_metadata = __esm({
  ".papi/descriptors/src/polkadot_metadata.ts"() {
    "use strict";
    binMeta = "";
    polkadot_metadata_default = binMeta;
  }
});

// .papi/descriptors/src/moonbeam_metadata.ts
var moonbeam_metadata_exports = {};
__export(moonbeam_metadata_exports, {
  default: () => moonbeam_metadata_default
});
var binMeta2, moonbeam_metadata_default;
var init_moonbeam_metadata = __esm({
  ".papi/descriptors/src/moonbeam_metadata.ts"() {
    "use strict";
    binMeta2 = "";
    moonbeam_metadata_default = binMeta2;
  }
});

// .papi/descriptors/src/bifrost_metadata.ts
var bifrost_metadata_exports = {};
__export(bifrost_metadata_exports, {
  default: () => bifrost_metadata_default
});
var binMeta3, bifrost_metadata_default;
var init_bifrost_metadata = __esm({
  ".papi/descriptors/src/bifrost_metadata.ts"() {
    "use strict";
    binMeta3 = "";
    bifrost_metadata_default = binMeta3;
  }
});

// .papi/descriptors/src/astar_metadata.ts
var astar_metadata_exports = {};
__export(astar_metadata_exports, {
  default: () => astar_metadata_default
});
var binMeta4, astar_metadata_default;
var init_astar_metadata = __esm({
  ".papi/descriptors/src/astar_metadata.ts"() {
    "use strict";
    binMeta4 = "";
    astar_metadata_default = binMeta4;
  }
});

// .papi/descriptors/src/kusama_metadata.ts
var kusama_metadata_exports = {};
__export(kusama_metadata_exports, {
  default: () => kusama_metadata_default
});
var binMeta5, kusama_metadata_default;
var init_kusama_metadata = __esm({
  ".papi/descriptors/src/kusama_metadata.ts"() {
    "use strict";
    binMeta5 = "";
    kusama_metadata_default = binMeta5;
  }
});

// .papi/descriptors/src/index.ts
var index_exports = {};
__export(index_exports, {
  ArithmeticError: () => ArithmeticError,
  BabeAllowedSlots: () => BabeAllowedSlots,
  BabeDigestsNextConfigDescriptor: () => BabeDigestsNextConfigDescriptor,
  BabeDigestsPreDigest: () => BabeDigestsPreDigest,
  BagsListEvent: () => BagsListEvent,
  BagsListListListError: () => BagsListListListError,
  BalanceStatus: () => BalanceStatus,
  BalancesAdjustmentDirection: () => BalancesAdjustmentDirection,
  BalancesTypesReasons: () => BalancesTypesReasons,
  BountiesEvent: () => BountiesEvent,
  BrokerCoretimeInterfaceCoreAssignment: () => BrokerCoretimeInterfaceCoreAssignment,
  ChildBountiesEvent: () => ChildBountiesEvent,
  ChildBountyStatus: () => ChildBountyStatus,
  ClaimsStatementKind: () => ClaimsStatementKind,
  CommonAuctionsEvent: () => CommonAuctionsEvent,
  CommonClaimsEvent: () => CommonClaimsEvent,
  CommonCrowdloanLastContribution: () => CommonCrowdloanLastContribution,
  CommonParasRegistrarEvent: () => CommonParasRegistrarEvent,
  CommonSlotsEvent: () => CommonSlotsEvent,
  ConvictionVotingVoteAccountVote: () => ConvictionVotingVoteAccountVote,
  ConvictionVotingVoteVoting: () => ConvictionVotingVoteVoting,
  DigestItem: () => DigestItem,
  DispatchClass: () => DispatchClass,
  DispatchRawOrigin: () => DispatchRawOrigin,
  ElectionProviderMultiPhaseElectionCompute: () => ElectionProviderMultiPhaseElectionCompute,
  ElectionProviderMultiPhaseEvent: () => ElectionProviderMultiPhaseEvent,
  ElectionProviderMultiPhasePhase: () => ElectionProviderMultiPhasePhase,
  GovernanceOrigin: () => GovernanceOrigin,
  GrandpaEquivocation: () => GrandpaEquivocation,
  GrandpaEvent: () => GrandpaEvent,
  GrandpaStoredState: () => GrandpaStoredState,
  IdentityData: () => IdentityData,
  IdentityJudgement: () => IdentityJudgement,
  InvalidDisputeStatementKind: () => InvalidDisputeStatementKind,
  MmrPrimitivesError: () => MmrPrimitivesError,
  MultiAddress: () => MultiAddress,
  MultiSignature: () => MultiSignature,
  MultiSigner: () => MultiSigner,
  NominationPoolsBondExtra: () => NominationPoolsBondExtra,
  NominationPoolsClaimPermission: () => NominationPoolsClaimPermission,
  NominationPoolsCommissionClaimPermission: () => NominationPoolsCommissionClaimPermission,
  NominationPoolsConfigOp: () => NominationPoolsConfigOp,
  NominationPoolsPalletFreezeReason: () => NominationPoolsPalletFreezeReason,
  NominationPoolsPoolState: () => NominationPoolsPoolState,
  OccupiedCoreAssumption: () => OccupiedCoreAssumption,
  OffencesEvent: () => OffencesEvent,
  ParachainsDisputeLocation: () => ParachainsDisputeLocation,
  ParachainsDisputeResult: () => ParachainsDisputeResult,
  ParachainsDisputesEvent: () => ParachainsDisputesEvent,
  ParachainsHrmpEvent: () => ParachainsHrmpEvent,
  ParachainsInclusionAggregateMessageOrigin: () => ParachainsInclusionAggregateMessageOrigin,
  ParachainsInclusionUmpQueueId: () => ParachainsInclusionUmpQueueId,
  ParachainsOrigin: () => ParachainsOrigin,
  ParachainsParasEvent: () => ParachainsParasEvent,
  ParachainsParasParaLifecycle: () => ParachainsParasParaLifecycle,
  Phase: () => Phase,
  PolkadotPrimitivesV6DisputeStatement: () => PolkadotPrimitivesV6DisputeStatement,
  PolkadotPrimitivesV6ExecutorParamsExecutorParam: () => PolkadotPrimitivesV6ExecutorParamsExecutorParam,
  PolkadotPrimitivesV6PvfPrepKind: () => PolkadotPrimitivesV6PvfPrepKind,
  PolkadotPrimitivesV6ValidDisputeStatementKind: () => PolkadotPrimitivesV6ValidDisputeStatementKind,
  PolkadotRuntimeParachainsCoretimeEvent: () => PolkadotRuntimeParachainsCoretimeEvent,
  PolkadotRuntimeParachainsSchedulerCommonAssignment: () => PolkadotRuntimeParachainsSchedulerCommonAssignment,
  PreimageEvent: () => PreimageEvent,
  PreimageOldRequestStatus: () => PreimageOldRequestStatus,
  PreimagePalletHoldReason: () => PreimagePalletHoldReason,
  PreimageRequestStatus: () => PreimageRequestStatus,
  PreimagesBounded: () => PreimagesBounded,
  PvfExecKind: () => PvfExecKind,
  RecoveryEvent: () => RecoveryEvent,
  ReferendaTypesCurve: () => ReferendaTypesCurve,
  RootTestingEvent: () => RootTestingEvent,
  SessionEvent: () => SessionEvent,
  SlashingOffenceKind: () => SlashingOffenceKind,
  StakingForcing: () => StakingForcing,
  StakingPalletConfigOp: () => StakingPalletConfigOp,
  StakingPalletConfigOpBig: () => StakingPalletConfigOpBig,
  StakingRewardDestination: () => StakingRewardDestination,
  TokenError: () => TokenError,
  TraitsScheduleDispatchTime: () => TraitsScheduleDispatchTime,
  TransactionPaymentEvent: () => TransactionPaymentEvent,
  TransactionPaymentReleases: () => TransactionPaymentReleases,
  TransactionValidityTransactionSource: () => TransactionValidityTransactionSource,
  TransactionValidityUnknownTransaction: () => TransactionValidityUnknownTransaction,
  TransactionalError: () => TransactionalError,
  TreasuryPaymentState: () => TreasuryPaymentState,
  UpgradeGoAhead: () => UpgradeGoAhead,
  UpgradeRestriction: () => UpgradeRestriction,
  ValidityAttestation: () => ValidityAttestation,
  Version: () => Version,
  VestingEvent: () => VestingEvent,
  VotingConviction: () => VotingConviction,
  WestendRuntimeRuntimeFreezeReason: () => WestendRuntimeRuntimeFreezeReason,
  XcmPalletVersionMigrationStage: () => XcmPalletVersionMigrationStage,
  XcmV2JunctionBodyPart: () => XcmV2JunctionBodyPart,
  XcmV2MultiassetWildFungibility: () => XcmV2MultiassetWildFungibility,
  XcmV2OriginKind: () => XcmV2OriginKind,
  XcmV3Instruction: () => XcmV3Instruction,
  XcmV3Junction: () => XcmV3Junction,
  XcmV3JunctionBodyId: () => XcmV3JunctionBodyId,
  XcmV3JunctionNetworkId: () => XcmV3JunctionNetworkId,
  XcmV3Junctions: () => XcmV3Junctions,
  XcmV3MaybeErrorCode: () => XcmV3MaybeErrorCode,
  XcmV3MultiassetAssetId: () => XcmV3MultiassetAssetId,
  XcmV3MultiassetAssetInstance: () => XcmV3MultiassetAssetInstance,
  XcmV3MultiassetFungibility: () => XcmV3MultiassetFungibility,
  XcmV3MultiassetMultiAssetFilter: () => XcmV3MultiassetMultiAssetFilter,
  XcmV3MultiassetWildMultiAsset: () => XcmV3MultiassetWildMultiAsset,
  XcmV3Response: () => XcmV3Response,
  XcmV3TraitsError: () => XcmV3TraitsError,
  XcmV3WeightLimit: () => XcmV3WeightLimit,
  XcmV4AssetAssetFilter: () => XcmV4AssetAssetFilter,
  XcmV4AssetWildAsset: () => XcmV4AssetWildAsset,
  XcmV4Instruction: () => XcmV4Instruction,
  XcmV4Response: () => XcmV4Response,
  XcmV5AssetFilter: () => XcmV5AssetFilter,
  XcmV5Instruction: () => XcmV5Instruction,
  XcmV5Junction: () => XcmV5Junction,
  XcmV5Junctions: () => XcmV5Junctions,
  XcmV5NetworkId: () => XcmV5NetworkId,
  XcmV5WildAsset: () => XcmV5WildAsset,
  XcmVersionedAsset: () => XcmVersionedAsset,
  XcmVersionedAssetId: () => XcmVersionedAssetId,
  XcmVersionedAssets: () => XcmVersionedAssets,
  XcmVersionedLocation: () => XcmVersionedLocation,
  XcmVersionedXcm: () => XcmVersionedXcm,
  astar: () => astar_default,
  bifrost: () => bifrost_default,
  getMetadata: () => getMetadata6,
  kusama: () => kusama_default,
  moonbeam: () => moonbeam_default,
  polkadot: () => polkadot_default
});
module.exports = __toCommonJS(index_exports);

// .papi/descriptors/src/common.ts
var table = new Uint8Array(128);
for (let i = 0; i < 64; i++) table[i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i * 4 - 205] = i;
var toBinary = (base64) => {
  const n = base64.length, bytes = new Uint8Array((n - Number(base64[n - 1] === "=") - Number(base64[n - 2] === "=")) * 3 / 4 | 0);
  for (let i2 = 0, j = 0; i2 < n; ) {
    const c0 = table[base64.charCodeAt(i2++)], c1 = table[base64.charCodeAt(i2++)];
    const c2 = table[base64.charCodeAt(i2++)], c3 = table[base64.charCodeAt(i2++)];
    bytes[j++] = c0 << 2 | c1 >> 4;
    bytes[j++] = c1 << 4 | c2 >> 2;
    bytes[j++] = c2 << 6 | c3;
  }
  return bytes;
};

// .papi/descriptors/src/polkadot.ts
var descriptorValues = Promise.resolve().then(() => (init_descriptors(), descriptors_exports)).then((module2) => module2["Polkadot"]);
var metadataTypes = Promise.resolve().then(() => (init_metadataTypes(), metadataTypes_exports)).then(
  (module2) => toBinary("default" in module2 ? module2.default : module2)
);
var asset = {};
var getMetadata = () => Promise.resolve().then(() => (init_polkadot_metadata(), polkadot_metadata_exports)).then(
  (module2) => toBinary("default" in module2 ? module2.default : module2)
);
var genesis = "0x91b171bb158e2d3848fa23a9f1c25182fb8e20313b2c1eb49219da7a70ce90c3";
var _allDescriptors = { descriptors: descriptorValues, metadataTypes, asset, getMetadata, genesis };
var polkadot_default = _allDescriptors;

// .papi/descriptors/src/moonbeam.ts
var descriptorValues2 = Promise.resolve().then(() => (init_descriptors(), descriptors_exports)).then((module2) => module2["Moonbeam"]);
var metadataTypes2 = Promise.resolve().then(() => (init_metadataTypes(), metadataTypes_exports)).then(
  (module2) => toBinary("default" in module2 ? module2.default : module2)
);
var asset2 = {};
var getMetadata2 = () => Promise.resolve().then(() => (init_moonbeam_metadata(), moonbeam_metadata_exports)).then(
  (module2) => toBinary("default" in module2 ? module2.default : module2)
);
var genesis2 = "0xfe58ea77779b7abda7da4ec526d14db9b1e9cd40a217c34892af80a9b332b76d";
var _allDescriptors2 = { descriptors: descriptorValues2, metadataTypes: metadataTypes2, asset: asset2, getMetadata: getMetadata2, genesis: genesis2 };
var moonbeam_default = _allDescriptors2;

// .papi/descriptors/src/bifrost.ts
var descriptorValues3 = Promise.resolve().then(() => (init_descriptors(), descriptors_exports)).then((module2) => module2["Bifrost"]);
var metadataTypes3 = Promise.resolve().then(() => (init_metadataTypes(), metadataTypes_exports)).then(
  (module2) => toBinary("default" in module2 ? module2.default : module2)
);
var asset3 = {};
var getMetadata3 = () => Promise.resolve().then(() => (init_bifrost_metadata(), bifrost_metadata_exports)).then(
  (module2) => toBinary("default" in module2 ? module2.default : module2)
);
var genesis3 = "0x262e1b2ad728475fd6fe88e62d34c200abe6fd693931ddad144059b1eb884e5b";
var _allDescriptors3 = { descriptors: descriptorValues3, metadataTypes: metadataTypes3, asset: asset3, getMetadata: getMetadata3, genesis: genesis3 };
var bifrost_default = _allDescriptors3;

// .papi/descriptors/src/astar.ts
var descriptorValues4 = Promise.resolve().then(() => (init_descriptors(), descriptors_exports)).then((module2) => module2["Astar"]);
var metadataTypes4 = Promise.resolve().then(() => (init_metadataTypes(), metadataTypes_exports)).then(
  (module2) => toBinary("default" in module2 ? module2.default : module2)
);
var asset4 = {};
var getMetadata4 = () => Promise.resolve().then(() => (init_astar_metadata(), astar_metadata_exports)).then(
  (module2) => toBinary("default" in module2 ? module2.default : module2)
);
var genesis4 = "0x9eb76c5184c4ab8679d2d5d819fdf90b9c001403e9e17da2e14b6d8aec4029c6";
var _allDescriptors4 = { descriptors: descriptorValues4, metadataTypes: metadataTypes4, asset: asset4, getMetadata: getMetadata4, genesis: genesis4 };
var astar_default = _allDescriptors4;

// .papi/descriptors/src/kusama.ts
var descriptorValues5 = Promise.resolve().then(() => (init_descriptors(), descriptors_exports)).then((module2) => module2["Kusama"]);
var metadataTypes5 = Promise.resolve().then(() => (init_metadataTypes(), metadataTypes_exports)).then(
  (module2) => toBinary("default" in module2 ? module2.default : module2)
);
var asset5 = {};
var getMetadata5 = () => Promise.resolve().then(() => (init_kusama_metadata(), kusama_metadata_exports)).then(
  (module2) => toBinary("default" in module2 ? module2.default : module2)
);
var genesis5 = "0xb0a8d493285c2df73290dfb7e61f870f17b41801197a149ca93654499ea3dafe";
var _allDescriptors5 = { descriptors: descriptorValues5, metadataTypes: metadataTypes5, asset: asset5, getMetadata: getMetadata5, genesis: genesis5 };
var kusama_default = _allDescriptors5;

// .papi/descriptors/node_modules/@polkadot-api/substrate-bindings/dist/esm/types/enum.mjs
var discriminant = {
  is(value, type) {
    return value.type === type;
  },
  as(value, type) {
    if (type !== value.type)
      throw new Error(
        `Enum.as(enum, ${type}) used with actual type ${value.type}`
      );
    return value;
  }
};
var Enum = Object.assign((type, value) => {
  return {
    type,
    value
  };
}, discriminant);
var _Enum = new Proxy(
  {},
  {
    get(_, prop) {
      return (value) => Enum(prop, value);
    }
  }
);

// .papi/descriptors/src/common-types.ts
var DigestItem = _Enum;
var Phase = _Enum;
var DispatchClass = _Enum;
var BagsListListListError = _Enum;
var TokenError = _Enum;
var ArithmeticError = _Enum;
var TransactionalError = _Enum;
var PreimageEvent = _Enum;
var BalanceStatus = _Enum;
var TransactionPaymentEvent = _Enum;
var StakingRewardDestination = _Enum;
var StakingForcing = _Enum;
var OffencesEvent = _Enum;
var GrandpaEvent = _Enum;
var XcmV3Junctions = _Enum;
var XcmV3Junction = _Enum;
var XcmV3JunctionNetworkId = _Enum;
var XcmV3JunctionBodyId = _Enum;
var XcmV2JunctionBodyPart = _Enum;
var XcmV3MultiassetAssetId = _Enum;
var XcmV5Junctions = _Enum;
var XcmV5Junction = _Enum;
var XcmV5NetworkId = _Enum;
var XcmVersionedLocation = _Enum;
var ConvictionVotingVoteAccountVote = _Enum;
var PreimagesBounded = _Enum;
var CommonClaimsEvent = _Enum;
var VestingEvent = _Enum;
var BountiesEvent = _Enum;
var ChildBountiesEvent = _Enum;
var ElectionProviderMultiPhaseEvent = _Enum;
var ElectionProviderMultiPhaseElectionCompute = _Enum;
var ElectionProviderMultiPhasePhase = _Enum;
var BagsListEvent = _Enum;
var NominationPoolsPoolState = _Enum;
var NominationPoolsCommissionClaimPermission = _Enum;
var NominationPoolsClaimPermission = _Enum;
var ParachainsParasEvent = _Enum;
var ParachainsHrmpEvent = _Enum;
var ParachainsDisputesEvent = _Enum;
var ParachainsDisputeLocation = _Enum;
var ParachainsDisputeResult = _Enum;
var CommonParasRegistrarEvent = _Enum;
var CommonSlotsEvent = _Enum;
var CommonAuctionsEvent = _Enum;
var PolkadotRuntimeParachainsCoretimeEvent = _Enum;
var XcmV5Instruction = _Enum;
var XcmV3MultiassetFungibility = _Enum;
var XcmV3MultiassetAssetInstance = _Enum;
var XcmV3MaybeErrorCode = _Enum;
var XcmV2OriginKind = _Enum;
var XcmV5AssetFilter = _Enum;
var XcmV5WildAsset = _Enum;
var XcmV2MultiassetWildFungibility = _Enum;
var XcmV3WeightLimit = _Enum;
var XcmVersionedAssets = _Enum;
var ParachainsInclusionAggregateMessageOrigin = _Enum;
var ParachainsInclusionUmpQueueId = _Enum;
var DispatchRawOrigin = _Enum;
var GovernanceOrigin = _Enum;
var ParachainsOrigin = _Enum;
var PreimageOldRequestStatus = _Enum;
var PreimageRequestStatus = _Enum;
var BabeDigestsNextConfigDescriptor = _Enum;
var BabeAllowedSlots = _Enum;
var BabeDigestsPreDigest = _Enum;
var BalancesTypesReasons = _Enum;
var PreimagePalletHoldReason = _Enum;
var WestendRuntimeRuntimeFreezeReason = _Enum;
var NominationPoolsPalletFreezeReason = _Enum;
var TransactionPaymentReleases = _Enum;
var GrandpaStoredState = _Enum;
var TreasuryPaymentState = _Enum;
var ConvictionVotingVoteVoting = _Enum;
var VotingConviction = _Enum;
var TraitsScheduleDispatchTime = _Enum;
var ClaimsStatementKind = _Enum;
var Version = _Enum;
var ChildBountyStatus = _Enum;
var PolkadotPrimitivesV6ExecutorParamsExecutorParam = _Enum;
var PolkadotPrimitivesV6PvfPrepKind = _Enum;
var PvfExecKind = _Enum;
var ValidityAttestation = _Enum;
var PolkadotPrimitivesV6DisputeStatement = _Enum;
var PolkadotPrimitivesV6ValidDisputeStatementKind = _Enum;
var InvalidDisputeStatementKind = _Enum;
var PolkadotRuntimeParachainsSchedulerCommonAssignment = _Enum;
var ParachainsParasParaLifecycle = _Enum;
var UpgradeGoAhead = _Enum;
var UpgradeRestriction = _Enum;
var BrokerCoretimeInterfaceCoreAssignment = _Enum;
var MultiSigner = _Enum;
var CommonCrowdloanLastContribution = _Enum;
var XcmV3Response = _Enum;
var XcmV3TraitsError = _Enum;
var XcmV4Response = _Enum;
var XcmPalletVersionMigrationStage = _Enum;
var XcmVersionedAssetId = _Enum;
var ReferendaTypesCurve = _Enum;
var MultiAddress = _Enum;
var BalancesAdjustmentDirection = _Enum;
var StakingPalletConfigOpBig = _Enum;
var StakingPalletConfigOp = _Enum;
var GrandpaEquivocation = _Enum;
var NominationPoolsBondExtra = _Enum;
var NominationPoolsConfigOp = _Enum;
var MultiSignature = _Enum;
var XcmVersionedXcm = _Enum;
var XcmV3Instruction = _Enum;
var XcmV3MultiassetMultiAssetFilter = _Enum;
var XcmV3MultiassetWildMultiAsset = _Enum;
var XcmV4Instruction = _Enum;
var XcmV4AssetAssetFilter = _Enum;
var XcmV4AssetWildAsset = _Enum;
var TransactionValidityUnknownTransaction = _Enum;
var TransactionValidityTransactionSource = _Enum;
var OccupiedCoreAssumption = _Enum;
var SlashingOffenceKind = _Enum;
var MmrPrimitivesError = _Enum;
var RootTestingEvent = _Enum;
var IdentityJudgement = _Enum;
var IdentityData = _Enum;
var XcmVersionedAsset = _Enum;
var SessionEvent = _Enum;
var RecoveryEvent = _Enum;

// .papi/descriptors/src/index.ts
var metadatas = {
  ["0xe260d17fcfa34f10503c91148a7bc2fd820e356295d2e18f828b5fa4190d47f7"]: polkadot_default,
  ["0x802c6b285502245d97dc73bdb164c128b9c7794637c67a3f23a105327d5566d2"]: moonbeam_default,
  ["0xee5cec8130a184e5a2c108220b93e10c76a6ab42397b8b6135c9f6260dfdc583"]: bifrost_default,
  ["0x464ca763562075276735f14824774423d36e51168f90a8fa89bf67930a89af0c"]: astar_default,
  ["0x4c843d1c1b5ce542fcc0e9cc1439ad3384e5753da24d2747c4aa24162a202449"]: kusama_default
};
var getMetadata6 = async (codeHash) => {
  try {
    return await metadatas[codeHash].getMetadata();
  } catch {
  }
  return null;
};
