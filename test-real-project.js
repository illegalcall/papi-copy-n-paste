#!/usr/bin/env node

/**
 * Comprehensive Test: Real Project Setup and Code Validation
 * 
 * This script:
 * 1. Creates a new test directory
 * 2. Initializes a Node.js project
 * 3. Installs PAPI CLI and dependencies
 * 4. Generates descriptors for Polkadot
 * 5. Creates a test file with our generated code
 * 6. Runs the code to verify it works
 * 7. Cleans up the test directory
 */

import { execSync } from 'child_process';
import { writeFileSync, mkdirSync, rmSync, existsSync } from 'fs';
import { join } from 'path';
import { fileURLToPath } from 'url';
import { dirname } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Test configuration
const TEST_DIR = join(__dirname, 'test-papi-project');
const PROJECT_NAME = 'test-papi-project';

// Colors for console output
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function logStep(step, message) {
  log(`\n${step}. ${message}`, 'cyan');
}

function logSuccess(message) {
  log(`‚úÖ ${message}`, 'green');
}

function logError(message) {
  log(`‚ùå ${message}`, 'red');
}

function logWarning(message) {
  log(`‚ö†Ô∏è  ${message}`, 'yellow');
}

function logInfo(message) {
  log(`‚ÑπÔ∏è  ${message}`, 'blue');
}

// Utility functions
function runCommand(command, cwd = process.cwd()) {
  try {
    log(`Running: ${command}`, 'bright');
    const result = execSync(command, { 
      cwd, 
      stdio: 'pipe',
      encoding: 'utf8'
    });
    return { success: true, output: result };
  } catch (error) {
    return { 
      success: false, 
      error: error.message,
      output: error.stdout?.toString() || '',
      stderr: error.stderr?.toString() || ''
    };
  }
}

function cleanup() {
  if (existsSync(TEST_DIR)) {
    log('Cleaning up test directory...', 'yellow');
    rmSync(TEST_DIR, { recursive: true, force: true });
    logSuccess('Test directory cleaned up');
  }
}

// Main test function
async function runComprehensiveTest() {
  log('üß™ COMPREHENSIVE PAPI CODE VALIDATION TEST', 'bright');
  log('This test validates that our generated code actually works in a real project', 'bright');
  
  try {
    // Step 1: Clean up any existing test directory
    logStep(1, 'Preparing test environment');
    cleanup();
    
    // Step 2: Create test directory
    logStep(2, 'Creating test project directory');
    mkdirSync(TEST_DIR, { recursive: true });
    logSuccess(`Created test directory: ${TEST_DIR}`);
    
    // Step 3: Initialize Node.js project
    logStep(3, 'Initializing Node.js project');
    const initResult = runCommand('npm init -y', TEST_DIR);
    if (!initResult.success) {
      throw new Error(`Failed to initialize npm project: ${initResult.error}`);
    }
    logSuccess('Node.js project initialized');
    
    // Step 4: Install PAPI CLI globally
    logStep(4, 'Installing PAPI CLI globally');
    const installResult = runCommand('npm install -g polkadot-api', TEST_DIR);
    if (!installResult.success) {
      logWarning('PAPI CLI installation failed, trying alternative approach...');
      // Try installing locally instead
      const localInstallResult = runCommand('npm install polkadot-api', TEST_DIR);
      if (!localInstallResult.success) {
        throw new Error(`Failed to install PAPI: ${localInstallResult.error}`);
      }
      logSuccess('PAPI installed locally');
    } else {
      logSuccess('PAPI CLI installed globally');
    }
    
    // Step 5: Add Polkadot chain
    logStep(5, 'Adding Polkadot chain to PAPI');
    const addResult = runCommand('papi add polkadot --wsUrl wss://rpc.polkadot.io', TEST_DIR);
    if (!addResult.success) {
      throw new Error(`Failed to add Polkadot chain: ${addResult.error}`);
    }
    logSuccess('Polkadot chain added to PAPI');
    
    // Step 6: Generate descriptors
    logStep(6, 'Generating PAPI descriptors');
    const generateResult = runCommand('papi generate', TEST_DIR);
    if (!generateResult.success) {
      throw new Error(`Failed to generate descriptors: ${generateResult.error}`);
    }
    logSuccess('PAPI descriptors generated');
    
    // Step 7: Install project dependencies
    logStep(7, 'Installing project dependencies');
    const depsResult = runCommand('npm install', TEST_DIR);
    if (!depsResult.success) {
      throw new Error(`Failed to install dependencies: ${depsResult.error}`);
    }
    logSuccess('Project dependencies installed');
    
    // Step 8: Create test file with our generated code
    logStep(8, 'Creating test file with generated code');
    const testCode = `// Test file generated by our web UI
// This code should work immediately after running the setup commands

import { createClient } from "polkadot-api"
import { start } from "polkadot-api/smoldot"
import { getSmProvider } from "polkadot-api/sm-provider"
import { chainSpec } from "polkadot-api/chains/polkadot"
import { polkadot } from "../.papi/descriptors/dist"

async function testGeneratedCode() {
  console.log('üöÄ Starting PAPI test with generated code...');
  
  try {
    // Initialize smoldot
    console.log('üì° Initializing smoldot light client...');
    const smoldot = start();
    
    // Add chain
    console.log('üîó Adding Polkadot chain...');
    const chain = await smoldot.addChain({ 
      chainSpec 
    });
    console.log('‚úÖ Chain added successfully');
    
    // Create client
    console.log('üîå Creating PAPI client...');
    const client = createClient(getSmProvider(chain));
    console.log('‚úÖ Client created successfully');
    
    // Get typed API
    console.log('üìã Getting typed API...');
    const typedApi = client.getTypedApi(polkadot);
    console.log('‚úÖ Typed API obtained successfully');
    
    // Test a simple query
    console.log('üîç Testing System.Number query...');
    const blockNumber = await typedApi.query.System.number();
    console.log('‚úÖ Block number query successful:', blockNumber);
    
    // Test getting account info
    console.log('üë§ Testing System.Account query...');
    const accountInfo = await typedApi.query.System.account("5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY");
    console.log('‚úÖ Account info query successful');
    console.log('   Nonce:', accountInfo.nonce);
    console.log('   Free balance:', accountInfo.data.free);
    
    // Test transaction creation (without submitting)
    console.log('üìù Testing transaction creation...');
    const call = typedApi.tx.Balances.transfer_allow_death({
      dest: "5FHneW46xGXgs5mUiveU4sbTyGBzmstUspZC92UhjJM694ty",
      value: 1000000000000n
    });
    console.log('‚úÖ Transaction created successfully');
    
    // Get encoded data
    console.log('üîê Getting encoded transaction data...');
    const encodedData = await call.getEncodedData();
    console.log('‚úÖ Transaction encoding successful, length:', encodedData.length);
    
    // Cleanup
    console.log('üßπ Cleaning up...');
    smoldot.terminate();
    console.log('‚úÖ Smoldot terminated');
    
    console.log('üéâ ALL TESTS PASSED! Our generated code works perfectly!');
    
  } catch (error) {
    console.error('‚ùå Test failed:', error);
    throw error;
  }
}

// Run the test
testGeneratedCode().catch(console.error);
`;

    const testFilePath = join(TEST_DIR, 'test-generated-code.js');
    writeFileSync(testFilePath, testCode);
    logSuccess(`Test file created: ${testFilePath}`);
    
    // Step 9: Run the test
    logStep(9, 'Running the generated code test');
    const testResult = runCommand('node test-generated-code.js', TEST_DIR);
    
    if (testResult.success) {
      logSuccess('Generated code test executed successfully!');
      log('Test output:', 'bright');
      console.log(testResult.output);
    } else {
      logError('Generated code test failed!');
      log('Error details:', 'bright');
      console.log('STDOUT:', testResult.output);
      console.log('STDERR:', testResult.stderr);
      throw new Error('Generated code test failed');
    }
    
    // Step 10: Verify the generated code structure
    logStep(10, 'Verifying generated code structure');
    
    // Check if .papi directory exists
    const papiDir = join(TEST_DIR, '.papi');
    if (!existsSync(papiDir)) {
      throw new Error('.papi directory not found');
    }
    logSuccess('.papi directory exists');
    
    // Check if descriptors were generated
    const descriptorsDir = join(papiDir, 'descriptors');
    if (!existsSync(descriptorsDir)) {
      throw new Error('descriptors directory not found');
    }
    logSuccess('descriptors directory exists');
    
    // Check if the main index file exists
    const indexFile = join(descriptorsDir, 'dist', 'index.mjs');
    if (!existsSync(indexFile)) {
      throw new Error('descriptors index.mjs file not found');
    }
    logSuccess('descriptors index.mjs file exists');
    
    // Final success
    log('\nüéâ COMPREHENSIVE TEST COMPLETED SUCCESSFULLY!', 'bright');
    log('‚úÖ Our generated code works perfectly in a real project', 'green');
    log('‚úÖ PAPI setup process is correct', 'green');
    log('‚úÖ Generated code imports and runs without errors', 'green');
    log('‚úÖ Users can copy-paste our code and it will work', 'green');
    
  } catch (error) {
    logError(`Test failed: ${error.message}`);
    log('Full error:', 'bright');
    console.error(error);
    
    // Show what we have so far
    if (existsSync(TEST_DIR)) {
      log('\nüìÅ Test directory contents:', 'bright');
      const lsResult = runCommand('ls -la', TEST_DIR);
      if (lsResult.success) {
        console.log(lsResult.output);
      }
      
      if (existsSync(join(TEST_DIR, '.papi'))) {
        log('\nüìÅ .papi directory contents:', 'bright');
        const papiLsResult = runCommand('ls -la .papi', TEST_DIR);
        if (papiLsResult.success) {
          console.log(papiLsResult.output);
        }
      }
    }
    
    process.exit(1);
  } finally {
    // Always cleanup
    cleanup();
  }
}

// Run the test
runComprehensiveTest();
